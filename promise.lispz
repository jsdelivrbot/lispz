(ref reject-promise (lambda [message data type]
  (ref name (or type "Promise-Error"))
  (ref error (stateful.morph! (new Error message)))
  (error.update! { name data })
  (#join '' 'throw ' error)
))
(global reject-promise reject-promise)
(global throw reject-promise)

(global promise {})
(global promise.rejected reject-promise)

(macro promise [?params *body] (lambda ?params
  (new Promise (lambda [resolve-promise catch-promise] *body))
))

(macro promise.callback [?params *body] (promise ?params
  (ref callback (lambda [err result]
    (cond err    (catch-promise  err)
          (else) (resolve-promise result)
    )
  ))
  (catch-errors (do *body) (catch-promise error))
))
(global promise.resolved (promise [pact] (resolve-promise pact)))

(ref promised (lambda [pledge]
  (ref is-function (=> (and (instance-of Function @) (is @.length 1))))
  (cond (not pledge)              (promise.resolved pledge)
        pledge.then               pledge
        (is-function pledge)      (promised (pledge))
        (else)                    (promise.resolved pledge)
  )
))
(global promised promised)

### ref: (ref p3 ((when [p1 p2] (actions-with-values p1 p2)).catch (=> ...))
    Waits for all promises to resolve then runs supplied code
    Returns a promise holding the result of the supplied code
###
(macro when [promises *on-ready]
  ((promise.all promises).then (lambda [resolutions]
    ((lambda promises *on-ready).apply null resolutions)
  ))
)

### ref: ((after a-promise ...).catch (=> ...))
    use @ to refer to a single promise result if needed
###
(macro after [a-promise *body] (a-promise .then  (=> *body)))

(using [list]
  ### Promises >> promise.all
    Given a list of promises and constant data, will return a list of
    returned data when all the promises have been resolved.
  ###
  (global promise.all (=>
    (ref flattened (list.flatten (*arguments 0)))
    (ref promisified (flattened.map (=> (promised @))))
    (return (Promise.all promisified))
  ))
)

(export [])
