(using [list]
  ### spec: Functional Programming >> curry
  ###
  (global curry (lambda [func]
    (ref curried (=>
      (ref args (*arguments 0))
      (cond (>= args.length func.length)
        (func.apply func args)  ## all done, run it
      (else)
        (=> ## otherwise return a partual function
          (curried.apply this (args.concat (*arguments 0)))
        )
      )
    ))
  ))
  (macro curry [params *body] (lispz.globals.curry (lambda params *body)))

  ### ref: ((compose func1, func2 ...) seed) -- runs left to right
    e.g. ((compose (=> (+ @ 1)) (=> (+ @ 2))) 3) ==> 6
  ###
  (global compose (=>
    (ref funcs (list.flatten (*arguments 0)))
    (=>
      (funcs.reduce (lambda [previous current]
        [[(current.apply this previous)]]
      ) (*arguments 0))
    )
  ))

  ### ref: (cascade func1, func2 ...)
    e.g. (cascade (=> 1) (=> (+ @ 1)) (=> (+ @ 2))) ==> 4
  ###
  (global cascade (=> ((lispz.globals.compose arguments) null)))

  ### spec: Functional Programming >> flip
    Flip calling order of 2 parameters
  ###
  (global flip (curry [fn] (curry [a b] (fn b a))))

  ### spec: basic >> Retrieval - can be used for objects and arrays
    Retrieve elements by index for arrays and property for objects.

        (get 1 [3,4,5])
        ## is 4 the same as
        (ref second (get 1))
        (second [3,4,5])

    Included are curries for _first_, _second_ and _third_. For objects, use
    _in_ to clarify order

        (get "b" in {a: 1 b: 2 c: 3})

    or use _pull_ as a curry

        (ref commands {a: 1 b: 2 c: 3})
        (ref command (pull commands))
        (command "b")
  ###
  (global dot    (curry [index array] (#join '' '(_res_=' array '[' index '])')))
  (global pull   (flip lispz.globals.dot))
  (global first  (dot 0))
  (global second (dot 1))
  (global third  (dot 2))
  ### spec: Functional Programming >> map
    Works on functors.
  ###
  (global map (lambda [item action] (item.map action)))
  ### spec: Functional Programming >> filter
    Works on functors.
  ###
  (global filter (lambda [item action] (item.filter action)))
  ### spec: Functional Programming >> map and filter
    (map-and-filter items (=> items.end))
  ###
  (global map-and-filter (compose lispz.globals.filter lispz.globals.map))

  ### ref: (recurse function)
      e.g. (ref sum (recursion [x y]
             (cond (> y 0) (sum (+ x 1) (- x 1)) (else) x)
           ))
  ###
  (global #recursion (lambda [context func]
    (lambda
        (ref args (*arguments))
        (cond context.queue
          (context.queue.push args)
        (else)  (do
          (context.update! { queue: [[args]]})
          (#join '' 'while(' (ref next-args (context.queue.shift)) '){'
            (context.update! { result: (func.apply null next-args)})
          '}'))
        )
        context.result
      )
  ))
  (macro recursion [?params *body]
    (#recursion (stateful) (lambda ?params *body))
  )

  (export [])
)
