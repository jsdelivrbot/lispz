### Load packages from CDN and other web sources - listing them when possible ###
(using "dom"
  (var script (lambda [uri next-step=>]
    (var el (dom.element "script" {type: "text/javascript"}))
    (dom.append! "head" el)
    (el.addEventListener "load"  (lambda [evt] (delay 20 (next-step=> evt))))
    (el.addEventListener "error" (lambda [evt] (throw evt)))
    (set! el.src uri)
  ))

  (var css (lambda [uri]
    (var el (dom.element "link" {type: "text/css" rel: "stylesheet" href: uri}))
    (dom.append! "head" el)
  ))

  (var http-get (lambda [uri next-step=>]
    (lispz.http_request uri "GET" next-step=>)
  ))

  (var json-request (lambda [uri next-step=>]
    (http-get uri (lambda [response] (next-step=> (JSON.parse response.text))))
  ))

  (var #cdnjs (lambda [query pkg next-step=>]
    (json-request (+ "http://api.cdnjs.com/libraries?" query pkg) (lambda [json]
      (var filtered (json.results.filter (lambda [it] (return (=== it.name pkg)))))
      (next-step=> (get filtered 0))
    ))
  ))

  ###
  # returns an array of filtered full paths to files to upload
  ###
  (var cdnjs-assets (lambda [pkg next-step=>]
    (#cdnjs "fields=assets&search=" pkg (lambda [item]
      (item.assets.some (lambda [it]
        (return? (contains it.version "alpha") false)
        (set! it.base (+ "https://cdnjs.cloudflare.com/ajax/libs/" pkg "/" it.version "/"))
        (next-step=> it)
	(return true)
      ))
    ))
  ))

  (var cdn-cache {})

  (var #cdnjs-load-some (lambda [asset inclusion-test=> next-step=>]
      (sequential asset.files (lambda [file next-file=>]
        (return? (not (inclusion-test=> file)) (next-file=>))
        (var ext (last (file.split ".")))
        (var filepath (+ asset.base file))
        (lispz.manifest.push filepath)
        (cond
          (is ext "js")   (script filepath next-file=>)
          (is ext "css")  (do (css filepath) (next-file=>))
	  (else)          (next-file=>)
        )
      ) next-step=>)
  ))
  
  ###
  # match is an exclude unless it is a dictionary with an include and exclude elements:
  # {include: '/myfile.js$/' exclude: '/.min./}
  # include is loaded first then everything not excluded. This provides load order
  ###
  (var cdnjs-load (lambda [pkg match next-step=>]
    (return? (get cdn-cache pkg) (next-step=>))
    (set! (get cdn-cache pkg) true)
    (cdnjs-assets pkg (lambda [asset]
      (var include (or match.include '/^$/'))
      (var exclude (or match.exclude match))
      (#cdnjs-load-some asset (lambda [file] (return (include.test file))) (=>
        (#cdnjs-load-some asset (lambda [file] (return (not (exclude.test file)))) next-step=>)
      ))
    ))
  ))

  (export {script css http-get json-request cdnjs-assets cdnjs-load})
)
