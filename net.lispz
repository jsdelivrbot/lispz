### Load packages from CDN and other web sources - listing them when possible ###
(using "dom"
  (var script (lambda [uri next-step=>]
    (var el (dom.element "script" {type: "text/javascript"}))
    (dom.append! "head" el)
    (el.addEventListener "load"  (=> [evt] (delay 20 (next-step=> evt))))
    (el.addEventListener "error" (=> [evt] (throw evt)))
    (set! el.src uri)
  ))

  (var css (lambda [uri]
    (var el (dom.element "link" {type: "text/css" rel: "stylesheet" href: uri}))
    (dom.append! "head" el)
  ))

  (var json-request (lambda [uri next-step=>]
    (lispz.http_request uri "GET"
      (=> [response] (next-step=> (JSON.parse response.text)))
    )
  ))

  (var #cdnjs (lambda [query pkg next-step=>]
    (json-request (+ "http://api.cdnjs.com/libraries?" query pkg) (=> [json]
      (@filtered (json.results.filter (=> [it] (return (=== it.name pkg)))) 0)
      (next-step=> (get @filtered 0))
    ))
  ))

  ###
  # returns an array of filtered full paths to files to upload
  ###
  (var cdnjs-assets (lambda [pkg exclude next-step=>]
    (#cdnjs "fields=assets&search=" pkg (=> [item]
      (@asset null)
      (item.assets.some (=> [it] (@asset it) (return (not (contains it.version "alpha")))))
      (@asset.base (+ "https://cdnjs.cloudflare.com/ajax/libs/" pkg "/" @asset.version "/"))
      (@asset.files (this.asset.files.filter (=> [file] (return (not (exclude.test file))))))
      (next-step=> @asset)
    ))
  ))

  (var cdnjs-load (lambda [pkg exclude next-step=>]
    (cdnjs-assets pkg exclude (=> [asset]
      (sequential asset.files (=> [file next-file=>]
        (@ext (last (file.split ".")))
	(@file (+ asset.base file))
	(lispz.manifest.push @file)
        (cond
          (is @ext "js")   (script @file next-file=>)
          (is @ext "css")  (do (css    @file) (next-file=>))
	  (else)           (next-file=>)
        )
      ) next-step=>)
    ))
  ))

  (export {script css json-request cdnjs-assets cdnjs-load})
)
