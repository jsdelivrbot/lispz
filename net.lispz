/*** Load packages from CDN and other web sources - listing them when possible ***/
(using "dom,observe"
  // script is an observable on load event
  (var script (lambda [uri] (observe
    (var el (dom.element "script" {type: "text/javascript"}))
    (dom.append! "head" el)
    (dom.observe el "load")
    (dom.error-listener el)
      (aside (set! el.src uri))
    (return (delay 20)))))

  (var http-request (lambda [uri method] (observe.callback (lambda [cb]
    (lispz.http_request uri method cb)))))

  (var json-request (lambda [uri]
    (observe
      (http-request uri "GET")
      (filter [response]
        (cond (defined? response.text)  (return true)
              (else)                    (do (error response) (return false))))
      (return (map [response] (return (JSON.parse response.text))))
    )
  ))

  (var cdnjs-latest (lambda [pkg]
    (observe
      (json-request (+ "http://api.cdnjs.com/libraries?search=" pkg)) 
      (return (map [json] (return (get
          (json.results.filter (lambda [item] (return (=== item.name pkg))))
        0 "latest"))))
    )
  ))

  (var cdnjs-assets (lambda [pkg fields] (return
    (json-request (+ "http://api.cdnjs.com/libraries?fields=assets&search=" pkg)))))
  
  /*** Load package from the CDN and continue normally once all is done ***/
  /*(var cdnjs-load (lambda [pkg]
    (net.cdnjs-latest pkg)
    (on-error [error] (alert (+ "CDNJS ERROR loading " pkg "\n" error)))
    (then [uri] **** change to bridge so in one stream ***
      (net.script uri)
      (on-error [error] (alert (+ "CDNJS ERROR loading " pkg "\n" error)))
      (then [] (export {})))))*/

  (export {script http-request json-request cdnjs-assets cdnjs-latest})
)
