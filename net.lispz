(using [list dom regex dict]
  (ref script (promise.callback [uri check max-ms] (lispz.script uri (lambda []
    (cond check (do
      (ref initialised (wait-for check max-ms))
      (when  initialised [] (callback))
      (promise.failed initialised [] (debug (+ uri "didn't load")))
    ) (else) (return (callback))
    )
  ))))

  (ref css (lambda [uri]
    (ref el (dom.element "link" {
      type: "text/css" rel: "stylesheet" href: uri
    }))
    (dom.append! "head" el)
  ))

  (ref http-request> (promise.callback [type uri headers body]
    (lispz.http_request uri type callback headers body)
  ))

  (ref http-get (promise.callback [uri headers]
    (lispz.http_request uri "GET" callback headers)
  ))

  (ref json-request (promise [uri headers]
    (when (http-get uri headers) [response]
      (resolve-promise (JSON.parse response))
    )
  ))

  ### spec: Network >> Is URL external
  ###
  (ref external? (lambda [url] (return (list.contains "://" url))))

  ### spec: Network >> Retrieve the last element in a URL path
  ###
  (ref url-path (lambda [href]
    (return (regex.substring href '/(.*\/)[^\/]*$/'))
  ))

  ### spec: Network >> Retrieve the last element in a URL path
  ###
  (ref url-actor (lambda [href]
    (return (regex.substring href '/.*\/([^\/]*)(?:\?.*)?$/'))
  ))

  ### ref: (net.dict-to-query data)
    e.g. (net.dict-to-query { a: 1  b: 2 }) ## ==> "?a=1&b=2"
  ###
  (ref dict-to-query (=>
    (ref kvp (dict.map (or @ {}) (lambda [k v]
      (+ (encodeURIComponent k) "=" (encodeURIComponent v))
    )))
    (+ "?" (kvp.join "&"))
  ))

  ### ref: (ref encoded (base64 contents)) ## replaces >0xFF with space ###
  (ref base64 lispz.base-64)

  ### ref: (ref uri (data-uri (base64 contents))) ###
  (ref data-uri lispz.data_uri)

  (export {
    script css http-get json-request external? url-actor url-path
    dict-to-query http-request> base64 data-uri
  })
)
