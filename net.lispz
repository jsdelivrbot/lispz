(using [list dom regex dict]
  (ref script (promise.callback [uri check max-ms] (lispz.script uri (lambda []
    (cond check (do
      ((after (wait-for check max-ms) (callback))
      .catch (=> (debug (+ uri " didn't load")) (callback)))
    ) (else) (callback))
  ))))

  (ref css (lambda [uri]
    (ref el (dom.node.create "link" {
      type: "text/css" rel: "stylesheet" href: uri
    }))
    (dom.append! "head" el)
  ))

  (ref http-request> (promise.callback [type uri headers body]
    (lispz.http_request uri type callback headers body)
  ))

  (ref http-get (promise.callback [uri headers]
    (lispz.http_request uri "GET" callback headers)
  ))

  (ref json-request (lambda [uri headers]
    (after (http-get uri headers) (JSON.parse @))
  ))

  ### spec: Network >> Is URL external
  ###
  (ref external? (lambda [url] (list.contains "://" url)))

  ### spec: Network >> Retrieve the last element in a URL path
  ###
  (ref url-path (lambda [href]
    (regex.substring href '/(.*\/)[^\/]*$/')
  ))

  ### spec: Network >> Retrieve the last element in a URL path
  ###
  (ref url-actor (lambda [href]
    (regex.substring href '/.*\/([^\/]*)(?:\?.*)?$/')
  ))

  ### ref: (net.dict-to-query data)
    e.g. (net.dict-to-query { a: 1  b: 2 }) ## ==> "?a=1&b=2"
  ###
  (ref dict-to-query (=>
    (ref kvp (dict.map (or @ {}) (lambda [k v]
      (+ (encodeURIComponent k) "=" (encodeURIComponent v))
    )))
    (+ "?" (kvp.join "&"))
  ))

  ### ref: (ref encoded (net.base64 contents)) ## replaces >0xFF with space ###
  (ref base64 lispz.base64)

  ### ref: (ref uri (net.data-uri (base64 contents))) ###
  (ref data-uri lispz.data_uri)

  ### ref: (net.loader "base64" window.base64 { build encode decode })
  ###
  (global #loader (lambda [filename test-for-loaded exporter]
    (ref export-once (once (exporter)))
    (after
      (script (+ "ext/" filename ".js") test-for-loaded)
      (export-once)
## reduces error accuracy
##    ).catch (=>
##      (console.debug filename ":" @)
##      (export-once)
    )
  ))
  (macro net.loader [file test exporting]
    (#loader file (=> test) (=> (export exporting)))
  )

  (export {
    script css http-get json-request external? url-actor url-path
    dict-to-query http-request> base64 data-uri
  })
)
