### spec: Libraries >> RIOT
A React-like, user interface library

http://riotjs.com/
https://github.com/riot/riot
###
(using  [jquery net dict dom counters list]
  ## we need to update the tags cache
  (lispz.update! { tags: (stateful) })
  ### spec: RIOT >> Get Tag Definition by Name
  ###
  (ref tag-by-name (pull lispz.tags))

  ## has side-effects as riot caches compile results
  (ref compile (=> (riot.compile.apply riot arguments)))

  (ref processed-tags (stateful {}))
  (ref processed-tag  (pull processed-tags))

  (ref child-tags (lambda [html-object]
    (ref html (or html-object.html html-object))
    (ref raw-tags (html.match '/<[^>\s]+[^>]*?class=[\'\"]?riot[\s\'\">]/g'))
    (ref children ((or raw-tags [[]]).map (=> (last ('/^<(\S*)/'.exec @)))))
    (Object.keys (dict.set children))
  ))
  (ref tag-splitting-regex '/<([^\/\s]+)>((?:.|\r?\n)*)<\/\1>/g')
  (ref split-tags (lambda [html]
    (ref find-one (lambda
      (cond (ref match (tag-splitting-regex.exec html)) (do
        (ref result [[{ name: (second match) html: (first match) }]])
        (result.concat (find-one))
      ))
    ))
    (find-one)
  ))

  ### spec: RIOT >> load
    Returns true if tag has been previously loaded. This
    allows the caller to decided whether to reuse or
    reinstate.
  ###
  (ref load (promise [name uri]
    (ref usings (lambda [tags]
      (ref new-tags (tags.filter (=>
        (cond @.length (do
          (ref processed (processed-tag @))
          (processed-tags.update! @ true)
          (not processed)
        ) (else) false)
      )))
      (ref loaded (promise.all (new-tags.map (=>
        (return (load @))
      ))))
      (when loaded (resolve-promise))
    ))

    (ref compile-and-process (lambda [tag-html]
      ## remove comments so ic case it has tags inside
      (ref no-comments (tag-html.replace '/<!--.*?-->/' ""))
      ## since one riot file can have multiple tags, we must split...
      (ref tags ((split-tags no-comments).filter (=> (not @))))
      ## ... and process separately (for source-map clarity)
      (tags.forEach (lambda [tag]
        ## full qualify tag name with file if they don't match
        (ref tag-name (cond
          (is name tag.name)  name
          (else)              (+ name ":" tag.name)
        ))
        ## tell script and css tags where they come from, then compile
        (ref add-options (+ "$& options={\"url\":\"" tag-name "\"}"))
        (compile (tag.html.replace '/<(script|css)[^>]*/' add-options))
      ))
      ## lastly, look for riot tags inside that need loading (class=riot)
      (usings (list.flatten (tags.map child-tags)))
    ))

    (ref retrieve-and-compile (lambda
      (ref url
        (or uri (+ (name.toLowerCase) ".riot.html"))
      )
      (when (net.http-get url) [tag-html]
        (lispz.tags.update! name tag-html)
        (compile-and-process tag-html)
      )
    ))

    (ref tag-def (tag-by-name name))
    (cond
      tag-def   (compile-and-process tag-def)
      (else)    (retrieve-and-compile)
    )
  ))

  (ref build (lambda [target-repo] (using [code-builder]
    (return (code-builder target-repo "riot" [[
      {repo: "riot/riot" files: [[
        {include: '/^riot\+compiler.js$/'}
      ]]}
    ]]))
  )))
  ### spec: RIOT >> mount
  ###
  (ref mount (=> (riot.mount.apply riot arguments)))

  ### spec: RIOT >> inject
    Load a named tag if needed, inject an instance into the DOM then mount it.
    The name can be the name of the file followed by the specific element.
  ###
  (ref inject (promise [name-path attributes parent-selector]
    (ref parts (name-path.split "/"))
    (ref name  (last parts))
    (ref file (first parts))
    (ref exists (tag-by-name name))
    (when (load name (+ file ".riot.html"))
      (cond exists (do
        (ref tags (riot.mount name))
        (resolve-promise (first tags))
      ) (else) (do
        (ref element (dom.node.create name attributes))
        (ref parent (or parent-selector "body"))
        (dom.append! parent element)
        (ref tags (riot.mount element name))
        (resolve-promise (first tags))
      ))
    )
  ))

  (global #riot-tag (lambda [tag]
    (cond (not tag.update!) (do
      (stateful.morph! tag)
      (stateful.after-updates tag (=> (this.update)))
    ))
  ))
  (macro riot-tag [*body]
    (ref tag (#riot-tag this))
    (ref opts tag.opts)
    *body
  )
  (macro on-mount  [*body] (tag.on "mount"  (=> *body)))
  (macro on-update [*body] (tag.on "update" (=> *body)))

  (ref loaded (net.script "ext/riot.js" (lambda (return window.riot))))
  (promise.failed loaded (export {build}))
  (when loaded (using [compilers]
    (stateful.morph! riot.parsers.js { lispz:
      (lambda [source options url]
        (ref opts (or options url {}))
        (ref name (+ (or url opts.url "tags") ".riot"))
        (compilers.lispz.compile source name)
      )
    })
    (stateful.morph! riot.util.tmpl { errorHandler: (lambda [err]
        (console.error err.message "in" err.riotData.tagName "(" err ")")
    )})
    (ref riot-elements (slice (document.getElementsByClassName "riot")))
    (ref load-all (promise.all (riot-elements.map (lambda [element]
      (ref name (element.tagName.toLowerCase))
      (return (load name (element.getAttribute "uri")))
    ))))
    (when load-all
      (riot.mount "*")
      (export {build compile load mount inject child-tags tag-by-name})
    )
  ))
)
