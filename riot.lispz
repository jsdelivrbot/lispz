(using  [jquery net github dict]
  (var compile (lambda [html to-js] (return (riot.compile html to-js))))

  (var processed-tags {})

  (var load (promise [name uri]
    (var load-tags-used (lambda [tags]
      (var new-tags (tags.filter (lambda [tag]
        (return-if (get processed-tags tag) false)
        (return (dict.update! processed-tags tag true))
      )))
      (var loaded (promise.all (new-tags.map (lambda [tag] (return (load tag))))))
      (when loaded [] (resolve-promise))
    ))
    (var usings (lambda [source]
      (var tags ('/<!--\s*using\s*(.*?)\s*-->/'.exec source))
      (cond
        tags   (do (load-tags-used ((last tags).split '/\s+/')))
        (else) (resolve-promise)
      )
    ))
    (var retrieve-and-compile (=>
      (var url (or uri (+ (name.toLowerCase) ".riot.html")))
      (when (net.http-get url) [tag] (usings (compile tag)))
    ))
    (cond
      (get lispz.tags name) (usings ((get lispz.tags name)))
      (else)                (retrieve-and-compile)
    )
  ))

  (var build (lambda [target-repo]
    (return (github.build target-repo "riot" [[
      {repo: "riot/riot" files: [[
        {include: '/^riot\+compiler.js$/'}
      ]]}
    ]]))
  ))

  (var mount (lambda [tags] (riot.mount.apply riot argument)))
  ### riot >> Trigger Display Changes
    Given a component context called *tag*, it is possible to change context
    data using the state component.
    
      <script type=text/lispz>
        (var tag (stateful.morph this))
        ...
        (var async-set-title (lambda [title]
          (tag.update! {title})
          (tag.update)
        )
      </script>
      
    For the confused, *update!* changes entries in the stateful context,
    while *update* is a riot function to update the display for bound
    data changes. Continue to use this approach where the data has logic
    around the change, but for the common situation where data is changed
    at the end of the logic, use *riot.update!*.
    
      (using [riot]
        ...
        (var async-set-titles (lambda [title footer]
          (riot.update! tag {title footer})
        )
      )
  ###
  (var update! (lambda [tag changes]
    (tag.update! changes)
    (tag.update) ## repaint
  ))

  (when (net.script "ext/riot.js") []
    (return-if (not window.riot) (export {build}))
    (set! riot.parsers.js.lispz
      (lambda [source] (return ((lispz.compile "riot-tags" source).join "\n")))
    )
    (var riot-elements (slice (document.getElementsByClassName "riot")))
    (var load-all (promise.all (riot-elements.map (lambda [element]
      (var name (element.tagName.toLowerCase))
      (return (load name (element.getAttribute "uri")))
    ))))
    (when load-all [mounts]
      (riot.mount "*")
      (export {build compile load mount update!})
    )
  )
)
