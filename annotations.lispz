### spec: Annotations
  In this context, annotations are comments in source files that can be processed
  by an external system for processing outside normal compilation and running.

  An annotation is a line containing **##<span>#</span> type: ** followed by
  lines of text ending in ##<span>#</span>. Annotation processors use a
  type to define which annotations they retrieve. They then receive a list of
  objects with _title_ and _body_ elements.

  Source code can be any language that supports multi-line comments:

      &lt;!-- ##<span>#</span> spec: Annotations in HTML or XML
            ...
           ##<span>#</span> --&gt;
      /* ##<span>#</span> spec: Annotations in a C, C++, Java, etc
          ...
         ##<span>#</span> */
###
### spec: annotations >> Processing Source Code
  The retrieve function processes source files one at a time. It returns an
  array of objects containing title and body members.

      (describe "(annotations.retrieve \"spec\" source-code)" (==>
        (it "retrieves a list {title: \"..\" body: \"..\"}" (==>
          (using [annotations]
            (ref source window.lispz_modules.annotations)
            (ref list (annotations.retrieve "spec" source)
            (expect list.length).toBeGreaterThan(0)
            (ref annotation (first list))
            (expect annotation.title).toBe("Annotations")
            (expect annotation.body.length).toBeGreaterThan(100)
          )
        ))
      ))
###
  (ref retrieve ([type source]==>
    (ref re (new RegExp (+ "###\\s*" type ":\\s*(.*)\\n((?:.|\\n)*?)###") "g"))
    (ref annotations [[]])
    (ref scan (==>
      (ref res (re.exec source))
      (return? (not res))
      (annotations.push {title: (get res 1)  body: (get res 2)})
      (scan)
    ))(scan)
    (return annotations)
  ))
  (export {retrieve})
