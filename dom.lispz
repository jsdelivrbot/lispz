(using [dict message list]
  (ref append! (lambda [parent element]
    (ref selector (document.querySelector parent))
    (selector.appendChild element)
  ))

  ### spec: DOM >> Replace inner html
  Given an element, replace the contents with the html provided as a string.
  ###
  (ref inner-html! (lambda [el html] (#set! el "innerHTML" html)))

  (ref global-styles (lambda [css]
    (ref el (node.create "style" { type: "text/css" }))
    (el.appendChild (document.createTextNode css))
    (append! "head" el)
  ))
  ### spec: DOM >> Select Elements
  This is a shortcut for element.querySelectorAll. It copies the
  results into an Array of elements for further processing.
  ###
  (ref select (lambda [el selector]
    (slice (el.querySelectorAll selector))
  ))

  (ref style! (lambda [el styles]
    (dict.for-each styles(lambda [name value]
      (#set! el.style name value))
    ))
  )

  ### ref: (dom.get-height height-text)
      passes px,em, make % height of window
  ###
  (ref get-height (lambda [from]
    (cond from
      (cond (is "%" (from.slice -1)) (do
        (ref percent (from.slice 0 -1))
        (ref pixels (/ (* window.innerHeight percent) 100))
        (+ pixels "px")
      ) (else)
        from
      )
    (else)
      "auto"
    )
  ))

  (ref node {
    ### ref: (dom.node.create type attributes)
        raw create of a DOM node
        e.g. (ref node (dom.node.create "div" {class: "hidden"}))
    ###
    create: (lambda [tag-name attributes]
      (ref element (document.createElement tag-name))
      (dict.for-each (or attributes {}) (lambda [k v]
        (element.setAttribute k v)
      ))
      element
    )
    ### ref: (dom.node.empty element)
        remove all inner elements from a node
        e.g. (ref new-node (dom.empty-node tag.root))
    ###
    empty: (lambda [node]
      (inner-html! node "")
    )
    ### ref: (dom.node.cache name node)
        keep a reference to a node for later retrieval
        e.g. (dom.node.cache "test" tag.root)
             (dom.node.copy tag.root (dom.node.cache "test"))
    ###
    cache:  (lambda [name node]
      (cond node (node-cache.update! name node))
      (get node-cache name)
    )
    ### ref: (dom.node.copy placeholder-node with-other-node)
        replace placeholder with a clone of another node
        e.g. (dom.node.copy tag.root (dom.node.cache tag.opts.name))
    ###
    copy: (lambda [node from]
      (ref new-node (from.cloneNode true))
      (node.parentNode.replaceChild new-node node)
      new-node
    )
    ### ref: (dom.node.fill target source)
        clear target node and clone source nodes into it
    ###
    fill: (lambda [target from]
      (inner-html! target "")
      (from.childNodes.forEach (=>
        (target.appendChild (@.cloneNode true))
      ))
    )
    ### ref: (dom.node.replace old-node new-node)
        replace one node with another in the DOM
        e.g. (dom.node.replace tag.root (dom.node.cache tag.opts.name))
    ###
    replace: (lambda [old-node new-node]
      (old-node.parentNode.replaceChild new-node old-node)
      new-node
    )
    ### ref: (ref node-ref-2 (dom.node.remove node))
        remove a node from the DOM and return a reference
    ###
    remove: (lambda [node]
      (node.parentNode.removeChild node)
      node
    )
    ### ref: (ref children (dom.node.children node))
        converts a DOM list into a Javascript Array
    ###
    children: (lambda [node] (slice node.children))
    ### ref: (dom.node.merge-attributes to from)
        merge all the attributes from one node to another
        e.g. (dom.node.merge-attributes child parent)
    ###
    merge-attributes: (lambda [to from]
      (list.for-each (list.slice from.attributes) (lambda [attr]
        (cond (not (to.getAttribute attr.name))
          (to.setAttribute attr.name attr.value)
        )
      ))
    )
    ### ref: (dom.node.children-with-class parent class-name)
        e.g. ((dom.node.children-with-class me "fill").map ...)
    ###
    children-with-class: (lambda [parent class-name]
      (slice (parent.getElementsByClassName class-name))
    )
    ### ref: (dom.node.has-parent-with-class node class-name)
    ###
    has-parent-with-class: (lambda [start class-name]
      (ref check (lambda [node]
        (cond (node.classList.contains class-name) (do
          (cond node.parentNode (check node.parentNode))
        ))
      )) (check start)
    )
  })
  (ref node-cache (stateful))

  (ref event-throttle (lambda [element event action]
    (ref add null)
    (ref listener (lambda [event]
      (element.removeEventListener event listener)
      (delay 66 add)
      (action event)
    ))
    (ref add (lambda [] (element.addEventListener event listener)))
  ))

  ### spec: DOM >> Forms >> Scraping
    Given a parent element, return a dictionary
    of input elements.
  ###
  (ref scrape-form (lambda [parent]
    (ref form (first (select parent "form")))
    form.elements
  ))

  ### spec: async >> Messaging >> Sources >> (dom.message)
    Start a message stream from different sources. All curried
    to create convenient functions.

        (dom.message "click" "my-message-address" document.body)

    will send messages to address _dom-click/my-message-name/_. For
    convenience the method returns the full address for mapping and filtering.

    We cache dom event listeners against the address being posted to. that
    way the dom will not send the message multiple times if the source is
    reinvoked.

    The parameters are _[MouseEvent address]_ - specifically _currentTarget_
    is the element that the click event is registered against while
    _srcElement_ is the inner element that was clicked.
  ###
  (ref dom-events (stateful))
  (ref post-dom-event> (lambda [address]
    (ref send-to-address (lambda [evt] (message.send address evt)))
    (stateful.cache dom-events (=> send-to-address) address)
  ))
  ### ref: (dom.message message-name event-name element)
    e.g. (ref address (dom.message "monitor" "click" document.body))
  ###
  (ref dom-message (lambda [address-base event-name element]
    (ref address (+ address-base "/dom/" event-name))
    (cond (not (get dom-events address)) (do
      (element.addEventListener event-name (post-dom-event> address))
    ))
    address
  ))

  ### ref: (dom.click element message-name)
    e.g. (dom.click document.body "monitor")
    messages sent to returned address (**monitor/dom/click**)
  ###
  (ref click (lambda [element address-base]
    (dom-message address-base "click" element)
  ))

  (export {
    append! event-throttle style! inner-html! global-styles
    select scrape-form message: dom-message click node
    get-height
  })
)
