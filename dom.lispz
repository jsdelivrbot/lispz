(using [dict message]
  (ref append! (lambda [parent element]
    (ref selector (document.querySelector parent))
    (selector.appendChild element)
  ))

  ### spec: DOM >> Replace inner html
  Given an element, replace the contents with the html provided as a string.
  ###
 (ref inner-html! (lambda [el html] (#set! el "innerHTML" html)))

  ### spec: DOM >> Select Elements
  This is a shortcut for element.querySelectorAll. It copies the
  results into an Array of elements for further processing.
  ###
  (ref select (lambda [el selector]
    (return (slice (el.querySelectorAll selector)))
  ))

  (ref style! (lambda [el styles]
    (dict.for-each styles(lambda [name value]
      (#set! el.style name value))
    ))
  )

  (ref node {
    ### ref: (dom.node.create type attributes)
        e.g. (ref node (dom.node.create "div" {class: "hidden"}))
    ###
    create: (lambda [tag-name attributes]
      (ref node (document.createElement tag-name))
      (dict.for-each (or attributes {}) (lambda [k v] (node.setAttribute k v)))
      node
    )
    ### ref: (dom.node.empty element)
        e.g. (ref new-node (dom.empty-node tag.root))
    ###
    empty: (lambda [node]
      (ref cleared (node.cloneNode false))
      (node.parentNode.replaceChild cleared node)
      cleared
    )
    ### ref: (dom.node.cache name node)
        e.g. (dom.node.cache "test" tag.root)
             (dom.node.fill tag.root (dom.node.cache "test"))
    ###
    cache:  (lambda [name node]
      (cond node (node-cache.update! name node))
      (get node-cache name)
    )
    ### ref: (dom.node.fill node with-other-node)
        e.g. (dom.node.fill tag.root (dom.node.cache tag.opts.name))
    ###
    fill: (lambda [node from]
      (ref new-node (from.cloneNode from true))
      (node.parentNode.replaceChild new-node node)
      new-node
    )
    ### ref: (dom.node.replace old-node new-node)
        e.g. (dom.node.replace tag.root (dom.node.cache tag.opts.name))
    ###
    replace: (lambda [old-node new-node]
      (old-node.parentNode.replaceChild new-node old-node)
      new-node
    )
    ### ref: (ref node-ref-2 (dom.node.remove node)) ###
    remove: (lambda [node]
      (node.parentNode.removeChild node)
      node
    )
  })
  (ref node-cache (stateful))

  (ref event-throttle (lambda [element event action]
    (ref add null)
    (ref listener (lambda [event]
      (element.removeEventListener event listener)
      (delay 66 add)
      (action event)
    ))
    (ref add (lambda [] (element.addEventListener event listener)))
  ))

  ### spec: DOM >> Forms >> Scraping
    Given a parent element, return a dictionary
    of input elements.
  ###
  (ref scrape-form (lambda [parent]
    (ref form (first (select parent "form")))
    form.elements
  ))

  ### spec: async >> Messaging >> Sources >> (dom.message)
    Start a message stream from different sources. All curried
    to create convenient functions.

        (dom.message "click" "my-message-address" document.body)

    will send messages to address _dom-click/my-message-name/_. For
    convenience the method returns the full address for mapping and filtering.

    We cache dom event listeners against the address being posted to. that
    way the dom will not send the message multiple times if the source is
    reinvoked.

    The parameters are _[MouseEvent address]_ - specifically _currentTarget_
    is the element that the click event is registered against while
    _srcElement_ is the inner element that was clicked.
  ###
  (ref dom-events (stateful))
  (ref post-dom-event> (lambda [address]
    (ref send-to-address (lambda [evt] (message.send address evt)))
    (stateful.cache dom-events (=> send-to-address) address)
  ))
  ### ref: (dom.message message-name event-name element)
    e.g. (ref address (dom.message "monitor" "click" document.body))
  ###
  (ref dom-message (lambda [address-base event-name element]
    (ref address (+ address-base "/dom/" event-name))
    (cond (not (get dom-events address)) (do
      (element.addEventListener event-name (post-dom-event> address))
    ))
    address
  ))

  ### ref: (dom.click element message-name)
    e.g. (dom.click document.body "monitor")
    messages sent to returned address (**monitor/dom/click**)
  ###
  (ref click (lambda [element address-base]
    (dom-message address-base "click" element)
  ))

  (export {
    append! event-throttle style! inner-html!
    select scrape-form message: dom-message click node
  })
)
