### spec: lists >> flatten - Flattening Lists of Lists
###
(ref flatten (lambda [list]
  (list.reduce (lambda [a b]
    (ref bflat (cond (instance-of Array b) (flatten b) (else) b))
    (return (a.concat bflat))
  ) [[]])
))

### spec Lists >> squash
  It is a common pattern to return a value or a list of more than one value is
  expected.
###
(ref squash (=> (cond (is @.length 1) (get @ 1) (else) @)))

### spec: lists >> for-each
  This is a helper for the JavaScript [].forEach(). It has the advantage that
  it behaves correctly if the item is not an array by running once for the entry
  if it is not a falsy.
###
(ref for-each (lambda [list action]
  (cond (not list)               null
        (instance-of Array list) (list.forEach action)
        (else)                   (action list)
  )
))

### spec: List and dictionary manipulation ###
(macro length [list] (#join '' list '.length'))
(macro rest [list] (list .slice 1))
(macro last [list] (first (list .slice -1)))
(global slice (lambda [list from to]
  (Array.prototype.slice.call list from to)
))

### spec: lists >> contains
###
(ref contains (lambda [substr str] (return (isnt -1 (str .indexOf substr)))))

### ref: (list.sort my-list) ## return a new list with items sorted
###
(ref sort (lambda [list] ((slice list).sort)))

### ref: (list.reverse my-list) ## return a new list with item order reversed
###
(ref reverse (lambda [list] ((slice list).reverse)))

(export { flatten squash for-each contains reverse sort })
