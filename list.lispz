### spec: lists -- Lists and Arrays
    Lisp was named as a shorter form of 'list processing'. When I first heard of lisp in the early 80's, I did not follow up on it as I did not see the value for my work in a language that gave priority to lists. Who needs specialised list processing when we have loops? This at a time I was using FORTH without thinking that I was treating the stack as a list. Time has moved on (a lot) and with the era of multiple cores starts, functional programming has gained new ground.

    Lispz compiles to JavaScript on the browser, so has very little opportunity at this time to use multiple cores. It will work happily with web workers once they become ubiquitous, but that is more the architecture of the workers than the language to use.

    Enough... on to lists. JavaScript ES5 has already added quite a few referentially transparent list processing functions. In this case it means they will not change the lists provided as input.

        (ref l1 [[1 2 3]]   l2 [[4 5]]   l3 [[6 7]])

        (l1.concat l2 l3)                                               ## [[1 2 3 4 5 6 7]]
        (l1.indexOf 2 from)                                             ## 1  ## from defaults to 0
        (li.join ", ")                                                  ## "1, 2, 3"
        (li.lastIndexOf 2 from)                                         ## 1  ## from default to last element

        (l1.every (lambda [item idx lst] (return (< idx 2))))           ## [[1 2]]  ## index, lst are optional
        (l1.filter (lambda [item idx lst] (return (% idx 2))))          ## [[1 3]]
        (l1.forEach (lambda [item idx lst] (console.log item)))         ## 1\n2\n3
        (l1.map (lambda [item idx lst] (return (* item 2))))            ## [[2 4 6]]
        (l1.reduce (lambda [prev item idx lst] (return (+ prev item))) seed)      ## 6 ## seed optional
        (l1.reduceRight (lambda [prev item idx lst] (return (+ prev item))) seed) ## 6 ## seed optional
        (l1.slice 1 2)                                                  ## [[2]] ## -ve from end
        (l1.some (lambda [item idx lst] (is item 4)))                   ## false  ## true if (is item 2)

    The following are not referentially transparent

        (l1.pop)                                                        ## 3  ## (is l1 [[1 2]])
        (l1.push 88)                                                    ## [[1 2 3 88]]
        (l1.reverse)                                                    ## (is l1 [[3 2 1]])
        (l1.shift))                                                     ## 1  ## (is l1 [[2 3]])
        (l1.sort (lambda [a b] (- b a)))                                ## [[3 2 1]]  ## function optional
        (l1.splice 1 1 32 33)                                           ## [[1 32 33 3]]  ## idx delcnt adds
        (l1.unshift 99)                                                 ## [[99 1 2 3]]

    Lispz has less convenient access to specific entries for updates or removals

        (get l1 1)                                                      ## 2
        (set! (get l1 1) 22)                                            ## (is l1 [[1 22 3]])
        (update! l1 1 22)                                               ## (is l1 [[1 22 3]])

    And for more functional processing

        (first l1)                                                      ## 1
        (rest l1)                                                       ## [[2 3]]
        (last l1)                                                       ## 3

    And others...

        (in l2 2)                                                       ## true
        (empty? l1)                                                     ## false
        (slice 1 2)                                                     ## [[2]]  ## works with *arguments
###
### spec: lists >> The Functional List
In Lispz the braces are reserved for function-like calls - being traditional functions and lisp macros. The atom immediately after the open brace is the name of the function or macro.

    (console.log "Hello world")   ## calling a javascript function to write to the console
    (debug "Hello world")         ## a macro that writes the current function call stack then a message

The first 'atom' can also be an anonymous function.

    ((lambda [] (console.log "Hello world")))
    ## is the same as
    (ref hw (lambda [] (console.log "Hello world")))
    (hw)

Internally functional lists are either expanded into more lispz statements by a macro or are converted to a Javascript function. The list becomes the function arguments.

    (console.log "Hello" "world")  ## JS==> console.log("Hello", "world")

Macros are amazing things. Addition does not expand to a function but to in-line code:

    (+ 1 2 3) ## JS==> 1 + 2 + 3
###
### spec: lists >> The Raw List

At the risk of repeating myself (and at the risk of repeating myself), Lispz is a lightweight compiler to JavaScript. A raw list is an sequence of atoms. When compiled to Javascript the sequence will be comma separated. It is most commonly used for parameters in a function definition:

    (ref expect (lambda [address listener=>]
      (add address {once: true listener=>})
    ))

The defined function, expect takes 2 parameters, being a string address and a function reference. The => at the end of this function reference is not syntax, just convenience text to show that this is a callback function.
###
### spec: lists >> Array as a List

For a traditional list or array, use [[]]. This will translate into a normal JavaScript array with standard functional support suchs as forEach and map.

    (ref list [[1 2 6 9]])
    (ref double (list.map [item] (return (* item 2)))) ## JS==> [2, 4, 12, 18]

Use the get command to retrieve entries

    (ref second (get double 2))

All the JavaScript list processing functions (every, filter, forEach, ...) are available. See the [List Processing](list-processing.md) section for more details.

To see if an array contains an element, use 'in':

    (cond (12 in list) (return "has dozen"))
###
### spec: lists >> flatten - Flattening Lists of Lists
###
(ref flatten (lambda [list]
  (return (list.reduce (lambda [a b]
    (ref bflat b)
    (cond (instance-of Array b) (ref bflat (flatten b)))
    (return (a.concat bflat))
  ) [[]]))
))
### spec: lists >> for-each
  This is a lelper for the JavaScript [].forEach(). It has the advantage that
  it behaves correctly if the item is not an array by running once for the entry
  if it is not a falsy.
###
(ref for-each (lambda [list action]
  (cond (not list)               (return null)
        (instance-of Array list) (list.forEach action)
        (else)                   (action list)
  )
))

### spec: lists >> contains
###
(ref contains (lambda [substr str] (return (isnt -1 (str .indexOf substr)))))

### spec: lists >> sort
###
(ref reverse (lambda [list]
  (return ((slice list).reverse))
))

(export {flatten for-each contains reverse})
