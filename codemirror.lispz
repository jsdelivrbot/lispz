### spec: Libraries >> CodeMirror
In-browser code editor http://codemirror.net/

https://github.com/codemirror/CodeMirror
###
(using  [net diff_match_patch message dict github compilers]
  (ref options-string (localStorage.getItem "CodeMirror-options"))
  (ref options (stateful.morph!
    (cond options-string (JSON.parse options-string)
    (else)  {
      lineNumbers:        true
      foldGutter:         true
  ##  gutters:            ["CodeMirror-lint-markers"
  ##                       "CodeMirror-foldgutter"]
      lint:               true
      matchBrackets:      true
      autoCloseBrackets:  true
      matchTags:          true
      showTrailingSpace:  true
      inputStyle:         "textarea" ## change to "contenteditable" after vim cursor bug fix
      autofocus:          false
      dragDrop:           false
      smartIndent:        true
      indentUnit:         2
      indentWithTabs:     false
      cursorScrollMargin: 5
      scrollbarStyle:     "overlay"
      extraKeys:          {
        'Cmd-Left':         "goLineStartSmart"
        'Ctrl-Q':           "fold_at_cursor"
        'Ctrl-Space':       "autocomplete"
        'Ctrl-/':           "toggleComment"
        'Ctrl-<':           "goColumnLeft"
        'Ctrl->':           "goColumnRight"
        'Ctrl-Shift-F':     "clearSearch"
        'Ctrl-=':           "toMatchingTag"
        'Alt-S':            "view_source"
        'Ctrl-`':           "insertSoftTab"
        'Ctrl-,':           "delLineLeft"
        'Ctrl-.':           "killLine"
        'Shift-Ctrl-,':     "delWrappedLineLeft"
        'Shift-Ctrl-.':     "delWrappedLineRight"
        'Ctrl-9':           "delWordBefore"
        'Ctrl-0':           "delWordAfter"
        'Ctrl-6':           "transposeChars"
        'Ctrl-Left':        "goWordLeft"
        'Ctrl-Right':       "goWordRight"
        'Ctrl-Home':        "goLineLeft"
        'Ctrl-Shift-Home':  "goLineLeftSmart"
        'Ctrl-End':         "goLineRight"
        ## paredit keys that defer if not in lisp code
        'Backspace':        "subpar_backward_delete"
        'Delete':           "subpar_forward_delete"
        'Ctrl-D':           "subpar_forward_delete"

        'Shift-9':          "subpar_open_bracket"
        '[':                "subpar_open_square_bracket"
        'Shift-[':          "subpar_open_braces"

        'Shift-0':          "subpar_close_bracket"
        ']':                "subpar_close_square_bracket"
        'Shift-]':          "subpar_close_braces"

        'Shift-\'':          "subpar_double_quote"

        'Ctrl-Alt-F':       "subpar_forward"
        'Ctrl-Alt-B':       "subpar_backward"
        'Ctrl-Alt-U':       "subpar_backward_up"
        'Ctrl-Alt-D':       "subpar_forward_down"
        'Ctrl-Alt-P':       "subpar_backward_down"
        'Ctrl-Alt-N':       "subpar_forward_up"

        'Shift-Ctrl-[':     "subpar_backward_barf"
        'Ctrl-Alt-Right':   "subpar_backward_barf"
        'Ctrl-]':           "subpar_backward_barf"

        'Shift-Ctrl-]':     "subpar_forward_barf"
        'Ctrl-Left':        "subpar_forward_barf"

        'Shift-Ctrl-9':     "subpar_backward_slurp"
        'Ctrl-Alt-Left':    "subpar_backward_slurp"
        'Ctrl-[':           "subpar_backward_slurp"

        'Shift-Ctrl-0':     "subpar_forward_slurp"
        'Ctrl-Right':       "subpar_forward_slurp"

        'Alt-Up':           "subpar_splice_delete_backward"
        'Alt-Down':         "subpar_splice_delete_forward"
        'Alt-S':            "subpar_splice"
        'Ctrl-Alt-/':       "subpar_indent_selection"

        'Alt-Enter':        "run_selection"
       }
    })
  ))
  ## write changed options back to persistent storage
  (ref update-options (lambda
    (localStorage.setItem "CodeMirror-options" (JSON.stringify options))
  ))
  ## Context menu for code editor
  (ref topic "codemirror/command")
  (ref menu [[
    ### {title: "File" children: [[
      {topic meta: "save" title: "Save"}
    ]]} ###
    {title: "Edit" children: [[
      {topic meta: "autocomplete" title: "Auto-Complete" }
      {topic meta: "redo" title: "Redo"}
      {topic meta: "undo" title: "Undo"}
      {topic meta: "redoSelection" title: "Redo Selection"}
      {topic meta: "undoSelection" title: "Undo Selection"}
      {divider: true}
      {topic meta: "toggleOverwrite" title: "Insert/Overwrite"}
      {topic meta: "toggleComment" title: "Comment/Uncomment" }
      {topic meta: "insertSoftTab" title: "Insert Soft Tab" }
      {topic meta: "defaultTab" title: "Tab or Indent"}
      {title: "Delete" children: [[
        {topic meta: "deleteLine" title: "Line"}
        {topic meta: "killLine" title: "Line Right" }
        {topic meta: "delLineLeft" title: "Line Left" }
        {divider: true}
        {topic meta: "delWrappedLineLeft" title: "Wrapped Line Left" }
        {topic meta: "delWrappedLineRight" title: "Wrapped Line Right" }
        {divider: true}
        {topic meta: "delWordBefore" title: "Word Left" }
        {topic meta: "delWordAfter" title: "Word Right" }
        {divider: true}
        {topic meta: "delGroupBefore" title: "Group Before"}
        {topic meta: "delGroupAfter" title: "Group After"}
        {divider: true}
        {topic meta: "delCharBefore" title: "Character Left"}
        {topic meta: "delCharAfter" title: "Character Right"}
      ]]}
      {topic meta: "indentAuto" title: "Auto Indent"}
      {topic meta: "indentLess" title: "Indent Left"}
      {topic meta: "indentMore" title: "Indent Right"}
      {topic meta: "newlineAndIndent" title: "New line and indent"}
      {divider: true}
      {topic meta: "transposeChars" title: "Transpose Characters" }
      {divider: true}
      {topic meta: "selectAll" title: "Select All"}
      {topic meta: "singleSelection" title: "Single Selection"}
    ]]}
    {title: "Go" children: [[
      {topic meta: "goDocStart" title: "Document Start"}
      {topic meta: "goDocEnd" title: "Document End"}
      {divider: true}
      {topic meta: "goCharLeft" title: "Char Left"}
      {topic meta: "goCharRight" title: "Char Right"}
      {divider: true}
      {topic meta: "goColumnLeft" title: "Column Left" }
      {topic meta: "goColumnRight" title: "Column Right" }
      {divider: true}
      {topic meta: "goGroupLeft" title: "Group Left"}
      {topic meta: "goGroupRight" title: "Group Right"}
      {divider: true}
      {topic meta: "goWordLeft" title: "Word Left" }
      {topic meta: "goWordRight" title: "Word Right" }
      {divider: true}
      {topic meta: "goLineStart" title: "Line Start"}
      {topic meta: "goLineStartSmart" title: "Smart Line Start" }
      {topic meta: "goLineEnd" title: "Line End"}
      {divider: true}
      {topic meta: "goLineLeft" title: "Line Left" }
      {topic meta: "goLineLeftSmart" title: "Smart Line Left" }
      {topic meta: "goLineRight" title: "Line Right" }
      {divider: true}
      {topic meta: "goLineUp" title: "Line Up"}
      {topic meta: "goLineDown" title: "Line Down"}
      {divider: true}
      {topic meta: "goPageUp" title: "Page Up"}
      {topic meta: "goPageDown" title: "Page Down"}
    ]]}
    {title: "Search" children: [[
      {topic meta: "find" title: "Find..."}
      {topic meta: "findNext" title: "Find Next"}
      {topic meta: "findPrev" title: "Find Previous"}
      {topic meta: "clearSearch" title: "Clear Search" }
      {divider: true}
      {topic meta: "replace" title: "Replace"}
      {topic meta: "replaceAll" title: "Replace All"}
      ## {divider: true} appears to only work for XML
      ## {topic meta: "toMatchingTag" title: "Matching Tag" }
    ]]}
    {title: "View" children: [[
      {topic meta: "view_keyboard_shortcuts" title: "Keyboard Shortcuts" }
      {topic meta: "fold_at_cursor" title: "Fold at Cursor" }
      {title: "Theme" children: [[
        {title: "Dark" children: [[
          {topic meta: "set_option,theme,3024-night" title: "3024"}
          {topic meta: "set_option,theme,ambiance" title: "Ambience"}
          {topic meta: "set_option,theme,ambiance-mobile" title: "Ambience (mobile)"}
          {topic meta: "set_option,theme,base16-dark" title: "Base 16"}
          {topic meta: "set_option,theme,blackboard" title: "Blackboard"}
          {topic meta: "set_option,theme,cobalt" title: "Cobalt"}
          {topic meta: "set_option,theme,colorforth" title: "Colour Forth"}
          {topic meta: "set_option,theme,erlang-dark" title: "Erlang Dark"}
          {topic meta: "set_option,theme,lesser-dark" title: "Lesser Dark"}
          {topic meta: "set_option,theme,mbo" title: "MBO"}
          {topic meta: "set_option,theme,midnight" title: "Midnight"}
          {topic meta: "set_option,theme,monokai" title: "Monokai"}
          {topic meta: "set_option,theme,night" title: "Night"}
          {topic meta: "set_option,theme,paraiso-dark" title: "Paraiso"}
          {topic meta: "set_option,theme,pastel-on-dark" title: "Pastel"}
          {topic meta: "set_option,theme,rubyblue" title: "Ruby Blue"}
          {topic meta: "set_option,theme,the-matrix" title: "The Matrix"}
          {topic meta: "set_option,theme,tomorrow-night-bright" title: "Tomorrow Night"}
          {topic meta: "set_option,theme,tomorrow-night-eighties" title: "Tomorrow Night Eighties"}
          {topic meta: "set_option,theme,twilight" title: "Twilight"}
          {topic meta: "set_option,theme,vibrant-ink" title: "Vibrant Ink"}
          {topic meta: "set_option,theme,xq-dark" title: "XQ Dark"}
          {topic meta: "set_option,theme,zenburn" title: "Zenburn"}
        ]]}
        {title: "Light" children: [[
          {topic meta: "set_option,theme,3024-day" title: "3024"}
          {topic meta: "set_option,theme,base16-light" title: "Base 16"}
          {topic meta: "set_option,theme,default" title: "Default"}
          {topic meta: "set_option,theme,eclipse" title: "Eclipse"}
          {topic meta: "set_option,theme,elegant" title: "Elegant"}
          {topic meta: "set_option,theme,mdn-line" title: "MDN"}
          {topic meta: "set_option,theme,neat" title: "Neat"}
          {topic meta: "set_option,theme,neo>Neo"}
          {topic meta: "set_option,theme,paraiso-light" title: "Paraiso"}
          {topic meta: "set_option,theme,solarized" title: "Solarized"}
          {topic meta: "set_option,theme,xq-light" title: "XQ Light"}
        ]]}
      ]]}
    ]]}
    {title: "Settings" children: [[
      {title: "Keyboard" children: [[
        {topic meta: "set_mode,default" title: "Code Mirror"}
        {topic meta: "set_mode,emacs" title: "Emacs"}
        {topic meta: "set_mode,sublime" title: "Sublime"}
        {topic meta: "set_mode,vim" title: "Vi"}
      ]]}
      {divider: true}
      {topic meta: "toggle_option,smartIndent" title: "Auto-indent"}
      {title: "Indent" children: [[
        {topic meta: "set_option,indentUnit,2" title: "2"}
        {topic meta: "set_option,indentUnit,4" title: "4"}
      ]]}
      {topic meta: "toggle_option,autoCloseBrackets" title: "Close Brackets"}
      {topic meta: "toggle_option,matchBrackets" title: "Match Brackets"}
      {topic meta: "toggle_option,matchTags" title: "Match Tags"}
      {divider: true}
      {title: "Scroll Margin" children: [[
        {topic meta: "set_option,cursorScrollMargin,0" title: "0"}
        {topic meta: "set_option,cursorScrollMargin,2" title: "2"}
        {topic meta: "set_option,cursorScrollMargin,4" title: "4"}
      ]]}
      {topic meta: "toggle_option,continueComments" title: "Comment Continuation"}
      {topic meta: "toggle_option,showTrailingSpace" title: "Show Trailing Spaces"}
      {topic meta: "toggle_option,dragDrop" title: "Toggle Drag and Drop"}
      {topic meta: "toggle_option,lineNumbers" title: "Toggle Line Numbers"}
      {topic meta: "toggle_option,lineWrapping" title: "Toggle Line Wrap"}
    ]]}
  ]])
  (ref listener (lambda [cm data]
    (ref args (data.item.meta.split ","))
    (ref command (args.shift))
    (args.unshift cm)
    ((get CodeMirror command).apply CodeMirror args)
  ))
  (ref open (lambda [owner wrapper]
    (ref cm (stateful.morph! (CodeMirror wrapper options)))
    (cm.update! {listener: (lambda [data] (listener cm data))})
    (message.send "codemirror/menu" menu)
    (message.listen (+ owner "/" topic) cm.listener)
    (return cm)
  ))
  (ref close (lambda [cm]
    (message.remove cm.listener)
  ))
  (ref spaces "                ")

  (ref extra-commands {
    view_keyboard_shortcuts: (lambda [cm]
      (ref keys (stateful []))
      (ref one-map (lambda [key-map]
        ((Object.keys key-map).forEach (lambda [key]
          (ref key-value (get key-map key))
          (cond
            (is key "fallthrough") (do
                (ref more (cond
                  (is (typeof key-value) "string") [[key-value]]
                  (else)                           key-value
                ))
                (more.forEach (lambda [key-map]
                  (one-map (get CodeMirror.keyMap key-map))
                ))
              )
            (else) (keys.push! (+ key ": " key-value))
          )
        ))
      ))
      (one-map cm.options.extraKeys)
      (ref core (stateful.morph! (get CodeMirror.keyMap key-map cm.options.keyMap)))
      (cond (not core.fallthrough)
        (core.update! {fallthrough: CodeMirror.keyMap.default.fallthrough}))
      (one-map core)
      (window.open
        (+ "data:text/html," (encodeURIComponent (keys.join "<br>")))
        "Keys" "width=300,height=600")
    )
    fold_at_cursor: (lambda [cm]
      (cm.foldCode (cm.getCursor))
    )
    toggle_option: (lambda [cm name]
      (CodeMirror.commands.set_option cm name (not (cm.getOption name)))
    )
    set_option: (lambda [cm name value]
      (cm.setOption name value)
      (options.update! name value)
      (update-options)
    )
    set_mode: (lambda [cm mode]
      (CodeMirror.commands.set_option cm "keyMap" mode)
    )
    auto_complete: (lambda [cm]
      (ref not-only (lambda
        (ref result (CodeMirror.hint.anyword.apply null arguments))
        (cond
          (isnt result.list.length 1) result
          (else) (do
            (ref size (- result.to.ch result.from.ch))
            (ref first-choice (first result.list))
            (cond
              (isnt first-choice.length size) result
              (else) ((stateful.morph! result) {list: [[]]}))
        ))
      ))
    )
  })
  ## Editing modes dependent on file type
  (ref default-mode-extensions {
    apl: "apl" as3: "apl" asf: "apl"
    c: "clike" cpp: "clike" h: "clike" cs: "clike"
    chh: "clike" hh: "clike" h__: "clike" hpp: "clike"
    hxx: "clike" cc: "clike" cxx: "clike" c__: "clike"
    "c++": "clike" stl: "clike" sma: "clike"
    java: "clike" scala: "clike" clj: "clojure"
    cpy: "cobol" cbl: "cobol"cob: "cobol"
    coffee: "coffeescript" coffeescript: "coffeescript"
    "gwt.coffee": "coffeescript"
    vlx: "commonlisp" fas: "commonlisp" lsp: "commonlisp"
    el: "commonlisp" css: "css" less: "css"
    dl: "d" d: "d" diff: "diff" dtd: "dtd" dylan: "dylan"
    ecl: "ecl" e: "eiffel" erl: "erlang" hrl: "erlang"
    f: "fortran" for: "fortran" FOR: "fortran"
    f95: "fortran" f90: "fortran" f03: "fortran"
    gas: "gas" gfm: "gfm" feature: "gherkin" go: "go"
    groovy: "groovy" "html.haml": "haml" hx: "haxe"
    lhs: "haskell" gs: "haskell" hs: "haskell"
    asp: "htmlembedded" jsp: "htmlembedded"
    ejs: "htmlembedded" http: "http"
    html: "htmlmixed" htm: "htmlmixed" ".py.jade": "jade"
    js: "javascript" json: "javascript" jinja2: "jinja2"
    jl: "julia" ls: "livescript" lua: "lua"
    markdown: "markdown" mdown: "markdown" mkdn: "markdown"
    md: "markdown" mkd: "markdown" mdwn: "markdown"
    mdtxt: "markdown" mdtext: "markdown"
    mdx: "mirc" dcx: "mirc"
    ml: "mllike" fs: "mllike" fsi: "mllike"
    mli: "mllike" fsx: "mllike" fsscript: "mllike"
    nginx: "nginx" nt: "ntriples" mex: "octave"
    pas: "pascal" pegjs: "pegjs" ps: "perl"
    php: "php" "lib.php": "php"
    pig: "pig" ini: "properties" properties: "properties"
    pp: "puppet" py: "python" q: "q" r: "r"
    rpm: "rpm" "src.rpm": "rpm" rst: "rst" rb: "ruby"
    rs: "rust" sass: "sass" scm: "scheme" ss: "scheme"
    sh: "shell" sieve: "sieve"
    sm: "smalltalk" st: "smalltalk" tpl: "smartymixed"
    solr: "solr" sparql: "sparql" sql: "sql"
    stex: "stex" tex: "stex" tcl: "tcl" tw: "tiddlywiki"
    tiki: "tiki" toml: "toml" ttl: "turtle" vb: "vb"
    bas: "vbscript" vbs: "vbscript" vtl: "velocity"
    v: "verilog" xml: "xml"
    xquery: "xquery" xq: "xquery" xqy: "xquery"
    yaml: "yaml" yml: "yaml" z80: "z80" asm: "z80"
  })
  (ref saved-mode-extensions localStorage.CodeMirror-mode-extensions)
  (ref mode-extensions (cond
    saved-mode-extensions
      (dict.merge default-mode-extensions (JSON.parse saved-mode-extensions))
    (else)
      default-mode-extensions
  ))
  (ref get-mode-extension (pull mode-extensions))

  (ref set-mode (lambda [cm name]
    (ref mode (do
      (ref parts (name.split "."))
      (ref exts (parts.slice (cond (> parts.length 2) -2 (else) -1)))
      (ref ext (exts.join "."))
      (ref mode-extension (get mode-extensions ext))
      (cond mode-extension             mode-extension
            (get CodeMirror.modes ext) ext
            (else)                     "text"
      )
    ))
    (cm.setOption "mode" mode)
    (CodeMirror.autoLoadMode cm mode)
  ))

  ## CodeMirror lispz mode
  (ref init-lispz-mode (lambda
  (CodeMirror.defineSimpleMode "lispz" {
    start: [[
      {regex: '/""/'                                 token: "string"}
      {regex: '/"/'                   next: "string" token: "string"}
      {regex: '/\'(?:[^\\]|\\.)*?\'/'                token: "variable-2"}
      {regex: '/###/'                next: "comment" token: "comment" }
      {regex: '/(\()(?:([^\s\(\[\{\)\}\]]*?(?:!|\.push!?|\.pop!?\b))|(stateful\b))/'
                                indent: true  token: [["bracket" "error" "error"]]}
      {regex: '/(\()([^\s\(\[\{\)\}\]]+)/'
                                indent: true  token: [["bracket" "keyword"]]}
      {regex: '/true|false|null|undefined|debugger/' token: "atom"}
      {regex: '/0x[a-f\d]+|[-+]?(?:\.\d+|\d+\.?\d*)(?:e[-+]?\d+)?/i'
                                                     token: "number"}
      {regex: '/## .*/'                              token: "comment"}
      {regex: '/[\{\(\[]/'        indent: true       token: "bracket"}
      {regex: '/[\}\)\]]/'        dedent: true       token: "bracket"}
      {regex: '/[^\s\(\{\[\)\]\}]+/'                 token: "variable"}
      {regex: '/\s+/' next: "start"}
    ]]
    comment: [[
      {regex: '/###/' token: "comment" next: "start"}
      {regex: '/.*/'  token: "comment"}
    ]]
    string: [[
      {regex: '/[^\\]"/' token: "string" next: "start"}
      {regex: '/./' token: "string"}
    ]]
    meta: { lineComment: "## " dontIndentStates: [["comment" "string"]] }
  })
  (CodeMirror.defineMIME "text/lispz" "lispz")
  ## Update htmlmixed to understand lispz scripts
  (ref mimeModes (stateful.morph! CodeMirror.mimeModes))
  (cond (is (typeof (get mimeModes "text/html")) "string")
        (mimeModes.update! "text/html" {name: "htmlmixed"}))
  (ref mode (stateful.morph! (get mimeModes "text/html")))
  (cond (not mode.scriptTypes) (mode.update! {scriptTypes: [[]]}))
  (ref scriptTypes (stateful mode.scriptTypes))
  (scriptTypes.push! {matches: '/^text\/lispz$/' mode: "lispz"})
  (mimeModes.update! {htmlmixed: mode})

  (ref get-source (=> (cond
    (@.somethingSelected)  (@.doc.getSelection)
    (else)                 (@.doc.getValue)
  )))

  (ref get-compiler (=>
    (ref mode     (@.getModeAt (@.getCursor)))
    (ref compiler (get compilers mode.name))
    (cond
      compiler compiler
      (else)   { compile: (=> "") }
    )
  ))

  (ref compile (lambda [cm name]
    ((get-compiler cm).compile (get-source cm))
  ))

  (ref run_selection (lambda [cm]
    (ref compiler (get-compiler cm))
    (ref source (get-source cm))

    (message.send "code-editor/run/prepare" { source })
    (ref js (compiler.compile source ))
    (message.send "code-editor/run/compiled" {
      source js: (compilers.to-string js)
    })
    (compilers.run js)
  ))
  ### spec: codemirror >> Compiling Code
    To send the compiler output to anywhere but the console, use a copy of the
    following code.
      (message.listen "code-editor/compile/js" (lambda [compiled]
        ## compiled: {name source js}
      ))
  ###
  (message.listen "code-editor/compile/js" (lambda [compiled]))
  ### spec:
    To process the console output from running compiled code:
      (message.listen "code-editor/run/output" (lambda [run]
        ## run: {name source output}
      ))
  ###
  (message.listen "code-editor/run/output" (lambda [run]
    ## (console.log run.output)
  ))

  (ref lisp-modes {lispz: true clojure: true commonlisp: true scheme: true})
  (ref lisp-mode  (pull lisp-modes))
  (ref subpar-command (pull subpar.core))

  (ref subpart (lambda [cmd opt]
    (return (lambda [cm]
      (return CodeMirror.Pass) ## make a configuration option
      (ref mode (cm.getModeAt (cm.getCursor)))
      (cond (lisp-mode mode.name)  ((subpar-command cmd) cm opt)
            (else)                 CodeMirror.Pass
      )
    ))
  ))
  (CodeMirror.commands.update! {
    ## paredit keys that defer if not in lisp code
    subpar_backward_delete:        (subpart "backward_delete")
    subpar_forward_delete:         (subpart "forward_delete")
    subpar_forward_delete:         (subpart "forward_delete")

    subpar_open_bracket:           (subpart "open_expression" "()")
    subpar_open_square_bracket:    (subpart "open_expression" "[]")
    subpar_open_braces:            (subpart "open_expression" "{}")

    subpar_close_bracket:          (subpart "close_expression" ")")
    subpar_close_square_bracket:   (subpart "close_expression" "]")
    subpar_close_braces:           (subpart "close_expression" "}")

    subpar_double_quote:           (subpart "double_quote")

    subpar_forward:                (subpart "forward")
    subpar_backward:               (subpart "backward")
    subpar_backward_up:            (subpart "backward_up")
    subpar_forward_down:           (subpart "forward_down")
    subpar_backward_down:          (subpart "backward_down")
    subpar_forward_up:             (subpart "forward_up")

    subpar_backward_barf:          (subpart "backward_barf")
    subpar_backward_barf:          (subpart "backward_barf")
    subpar_backward_barf:          (subpart "backward_barf")

    subpar_forward_barf:           (subpart "forward_barf")
    subpar_forward_barf:           (subpart "forward_barf")

    subpar_backward_slurp:         (subpart "backward_slurp")
    subpar_backward_slurp:         (subpart "backward_slurp")
    subpar_backward_slurp:         (subpart "backward_slurp")

    subpar_forward_slurp:          (subpart "forward_slurp")
    subpar_forward_slurp:          (subpart "forward_slurp")

    subpar_splice_delete_backward: (subpart "splice_delete_backward")
    subpar_splice_delete_forward:  (subpart "splice_delete_forward")
    subpar_splice:                 (subpart "splice")
    subpar_indent_selection:       (subpart "indent_selection")

    run_selection:                 run_selection
  })
  ))

  ## elm script has a bug - restore for a later version.
  ## tern is for javascript features - overrides console.log
  (ref build-base (lambda [target-repo]
    (return (github.build target-repo "codemirror" [[
      {repo: "codemirror/CodeMirror" files: [[
        {base: "lib" include: '/codemirror\.(js|css)$/'}
        {base: "addon/mode" include: '/^simple.js$/'}
        {base: "keymap"}
        {base: "addon" exclude: '/test.js$|node.js$|standalone.js$|\/tern\//'}
        {base: "mode/htmlmixed" include: '/css$|js$/'}
        {base: "mode/javascript" include: '/css$|js$/'}
        {base: "mode/css" include: '/css$|js$/'}
      ]]}
      {repo: "achengs/subpar" files: [[
        {base: "resources/public/js" include: '/subpar.core.js/'}
      ]]}
    ]]))
  ))
  (ref build-themes (lambda [target-repo]
    (return (github.build target-repo "codemirror-themes" [[
      {repo: "codemirror/CodeMirror" files: [[
        {base: "theme"}
      ]]}
    ]]))
  ))
  (ref build-mode (lambda [target-repo]
    (return (github.build target-repo "codemirror-modes" [[
      {repo: "codemirror/CodeMirror" files: [[
        {base: "mode" exclude: '/htmlmixed|javascript|css|elm.js$|test.js$/'}
      ]]}
    ]]))
  ))
  (ref build (lambda [target-repo]
    (return (promise.all build-base build-themes build-mode))
  ))

  (lispz.css "ext/codemirror.css")
  (ref loaded (net.script "ext/codemirror.js"(lambda (return window.CodeMirror))))
  (when loaded
    (ref modes-loaded (net.script "ext/codemirror-modes.js" (lambda (return CodeMirror.modes.z80))))
    (when modes-loaded
      (stateful.morph! CodeMirror.commands)
      (CodeMirror.commands.update! extra-commands)
      (init-lispz-mode)
      (export {options open close set-mode build})
    )
    (promise.failed loaded (export {build}))
  )
  (delay 100 (lispz.css "ext/codemirror-themes.css"))
)
