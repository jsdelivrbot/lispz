(using [github riot list dict]
  (ref manifest (lambda
    (ref text (stateful ["CACHE MANIFEST"]))
    (lispz.manifest.forEach (lambda [uri] (text.push! uri)))
    (text.push! "NETWORK:" "*")
    (return (text.join "\n"))
  ))
  ### Package Lispz for distribution ###
  (ref package (lambda [repo-name]
    (package-repo (github.fs repo-name (first (repo-name.split "/"))))
  ))
  (ref package-repo (lambda [repo]
    (ref group (lambda [tree]
      (ref files (Object.keys tree))
      (ref modules (files.filter (=>
        (is "lispz" (last (@.split ".")))
      )))
      (ref riots   (files.filter (=>
        (is "riot.html" ((slice (@.split ".") -2).join "."))
      )))

      (promise.resolved {
        modules:  (modules.map (=> ((slice (@.split ".") 0 -1).join ".")))
        riots:    (riots.map   (=> ((slice (@.split ".") 0 -2).join ".")))
      })
    ))
    (ref stringify (=>
      (return ((@.replace '/[\\"]/g' "\\$&").replace '/\n/g' "\\n"))
    ))
    (ref load-module (lambda [name]
      (ref text (repo.read> (+ name ".lispz")))
      (when2 [text]
        [["\nlispz_modules['" name "']=\"" (stringify text) "\"\n"]]
      )
    ))
    (ref build-modules (lambda [names]
      (return (promise.all (names.map load-module)))
    ))

    (ref load-riot (lambda [name]
      (ref text (repo.read> (+ name ".riot.html")))
      (when2 [text]
        [["\n\n/*" name "*/\n\nlispz.tags['" name "']=\""
          (stringify text) "\"\n"]]
      )
    ))
    (ref build-riots (lambda [names]
      (return (promise.all (names.map load-riot)))
    ))

    (ref lispz-js    (repo.read> "lispz.js"))
    (ref groups      (after repo.entries> (group @)))
    (ref modules     (after groups  (build-modules @.modules)))
    (ref riots       (after groups  (build-riots @.riots)))

    (after (promise.all modules lispz-js riots) [sources]
      (ref code (list.flatten [["window.lispz_modules={}\n" @]]))
      (return (repo.write> "ext/lispz.js" (code.join "") "lispz release code")
      )
    )
  ))

  ### Distribution ###
  (ref distribute (lambda [target-repo]
    ## @TODO
  ))

  (export {manifest package distribute})
)
