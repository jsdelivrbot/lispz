(using [github riot list]
  (ref manifest (lambda []
    (ref text [["CACHE MANIFEST"]])
    (lispz.manifest.forEach (lambda [uri] (text.push uri)))
    (text.push "NETWORK:" "*")
    (return (text.join "\n"))
  ))
  ### Package Lispz for distribution ###
  (ref package (lambda [lispz-repo]
    (ref read-file (github.read.bind null lispz-repo))

    (ref group (lambda [files]
      (ref modules [[]] riots [[]])
      (files.forEach (lambda [entry]
        (return? (not (is "file" entry.type)))
        (ref parts (entry.name.split "."))
        (cond
          (is (last parts) "lispz")                  (modules.push (first parts))
          (is ((slice parts -2).join ".") "riot.html") (riots.push (first parts))
        )
      ))
      (return (promise.resolved {modules riots}))
    ))
    (ref build-modules (promise [names]
      (ref load-module (lambda [name]
        (ref uri (+ name ".lispz"))
        (return (when (read-file uri) [text]
          (ref contents (text.replace '/[\\"]/g' "\\$&"))
          (ref contents (contents.replace '/\n/g' "\\n"))
          (return [["\nlispz_modules['" name "']=\"" contents "\"\n"]])
        ))
      ))
      (return (promise.all (names.map load-module)))
    ))
    (ref build-riots (promise [names]
      (ref source [[]])
      (ref load-riot (lambda [name]
        (return (when (read-file (+ name ".riot.html")) [text]
          (ref usings ('/<!--\s*using\s*.*?\s*-->/'.exec text))
          (cond usings (ref usings ((first usings).replace "'" "")))
          (return [["\n\n/*" name "*/\n\nlispz.tags['" name "']=function(){"
            (riot.compile text true) "\nreturn '" usings  "'}\n"]])
        ))
      ))
      (return (promise.all (names.map load-riot)))
    ))

    (ref update-mode (github.update lispz-repo))
    (ref lispz-js    (when update-mode [] (return (read-file "lispz.js"))))
    (ref listing     (when update-mode []  (return (github.list-dir lispz-repo ""))))
    (ref groups      (when listing [files] (return (group files))))
    (ref modules     (when groups [files]  (return  (build-modules files.modules))))
    (ref riots       (when groups [files]  (return  (build-riots files.riots))))

    (ref all-loaded  (promise.all modules lispz-js riots))

    (return (when all-loaded [sources]
      (ref  code  (list.flatten [["window.lispz_modules={}\n" sources]]))
      (return (github.write lispz-repo "ext/lispz.js"
        (code.join "") "lispz release code")
      )
    ))
  ))

  ### Distribution ###
  (ref distribute (lambda [target-repo]
    ## @TODO
  ))

  (export {manifest package distribute})
)
