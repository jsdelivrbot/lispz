### https://developer.github.com/v3/ ###
### spec: Support
  (using [github]
    (ref contents> (promise [path]
      (promise.on-error resolve-promise)
      (when (github.repo> "paulmarrington/lispz") [repo]
      (when (github.contents> repo "master" "README.md") [contents]
        (resolve-promise contents)
      ))
    ))
  )
###
(using [net base64]

  ### spec: Retrieve repository details
    (it "will include the full name of the repo" (lambda [done]
      (using [github]
        (when (github2.repo> "paulmarrington/lispz") [repo]
        	((expect repo.full_name).toEqual "paulmarrington/lispz")
          (done)
        )
      )
    ))
  ###
  ### ref: (github.repo> project) ## log in form displayed if necessary
    e.g. (when (github.repo> "paulmarrington/lispz") [repo] ...)
    https://developer.github.com/v3/repos/contents/#get-contents
  ###
  (ref repo> (lambda [name] (get> (+ "repos/" name) {})))

  ### spec: List repositories for a user
    (it "will include the full name of the repo" (lambda [done]
      (using [github]
        (when (github.repos> "paulmarrington") [repos]
        	((expect repos.length).toBeGreaterThan 7)
          (done)
        )
      )
    ))
  ###
  ### ref: (github.repos> organisation)
    e.g. (when (github.repos> "paulmarrington") [repos] ...)
    https://developer.github.com/v3/repos/#list-user-repositories
  ###
  (ref repos> (lambda [owner]
    (get> (+ "users/" owner "/repos") {
      type: "all" sort: "updated" direction: "desc"
    })
  ))

  ### spec: Read contents given a branch and path
    (it "can be read as base64" (lambda [done]
      (using [github]
        (when (github.repo> "paulmarrington/lispz") [repo]
        (when (github.contents> repo "master" "README.md") [contents]
        	((expect contents.encoding).toEqual "base64")
          (done)
        ))
      )
    ))
  ###
  ### ref: (github.contents> repo branch path) ## info on dir or file
    e.g. (when (github.contents> repo "master" "/lib" }))
    https://developer.github.com/v3/repos/contents/#get-contents
  ###
  (ref contents> (lambda [repo branch path]
    (get> (+ "repos/" repo.full_name "/contents/" path) { ref: branch })
  ))

  ### spec: Read contents given SHA
    (it "can be read as base64" (lambda [done]
      (using [github]
        (when (github.repo> "paulmarrington/lispz") [repo]
        (when (github.blob> repo "master" "README.md") [blob]
        	((expect blob.encoding).toEqual "base64")
          (done)
        ))
      )
    ))
  ###
  ### ref: (github.blob> repo sha)
    e.g. (when (github.blob> repo tree[path].sha) [blob] blob.contents)
    https://developer.github.com/v3/git/blobs/#get-a-blob
  ###
  (ref blob> (lambda [repo sha]
    (get> (+ "repos/" repo.full_name "/git/blobs/" sha))
  ))

  ### spec: Download a file from the repository
    (it "can be read in text form" (lambda [done]
      (using [github]
        (when (github.repo> "paulmarrington/lispz") [repo]
        (when (github.download> repo "master" "README.md") [contents]
        	((expect contents).toEqual "base64")
          (done)
        ))
      )
    ))
  ###
  ### ref: (github.download> repo branch path)
    e.g. (when (github.download> repo "master" "README.md") [contents] ...)
  ###
  (ref download> (lambda [repo branch path]
    (ref base "https://raw.githubusercontent.com")
    (ref url (+ base "/" repo.full_name "/" branch "/" path))
    (net.http-get url)
  ))

  ### spec: Create a new entry
    (it "can create a new entry" (lambda [done]
      (using [github]
        (when (github.repo> "paulmarrington/lispz") [repo]
        (when (github.create> repo "master" "test/tmp.txt" "Hi" "msg") [result]
        	((expect result.message).toEqual "msg")
          (done)
        ))
      )
    ))
  ###
  ### ref: (github.create> repo branch path contents commit-message)
    (when (github.create> repo "master" "test/tmp.txt" "Hi" "msg") [result] ...)
    https://developer.github.com/v3/repos/contents/#create-a-file
  ###
  (ref create> (lambda [repo branch path contents message]
    (ref url (+ "repos/" repo.full_name "/contents/" path))
    (ref options { branch message content: (base64.encode contents) })
    (request> "PUT" url options)
  ))

  ### spec: Update an entry
  ###
  ### ref: (github.update> repo branch path sha contents commit-message)
    (when (github.update> repo "master" "test/tmp.txt" sha "Hi" "msg") [result] ...)
    https://developer.github.com/v3/repos/contents/#update-a-file
  ###
  (ref update> (lambda [repo branch path sha contents commit-message]
  ))

  ### spec: Delete an entry
  ###
  ### ref: (github.delete> repo branch path sha commit-message)
    (when (github.delete> repo "master" "test/tmp.txt" sha "msg") [result] ...)
    https://developer.github.com/v3/repos/contents/#delete-a-file
  ###
  (ref delete> (lambda [repo branch path sha commit-message]
  ))

  ### spec: List contents of a repository
    (it "can retrieve a tree object" (lambda [done]
      (using [github]
        (when (github.repo> "paulmarrington/lispz") [repo]
        (when (github.tree> repo "master") [tree]
        	((expect tree.tree.length).toBeGreaterThan 100)
          (done)
        ))
      )
    ))
  ###
  ### ref: (github.tree> repo branch) ## recursive info tree
    e.g. (when (github.tree> repo "master" }))
    https://developer.github.com/v3/git/trees/#get-a-tree-recursively
  ###
  (ref tree> (lambda [repo branch]
    (when (branch> repo branch) [branch]
    (get>
      (+ "repos/" repo.full_name "/git/trees/" branch.commit.sha)
      { recursive: 1 }
    )
  ))

  ### spec: Retrieve branch
    (it "can retrieve branch details" (lambda [done]
      (using [github]
        (when (github2.repo> "paulmarrington/lispz") [repo]
        (when (github2.branch> repo "master") [branch]
        	((expect branch.name).toequal "master")
          (done)
        ))
      )
    ))
  ###
  ### ref: (github.branch> repo branch)
    e.g. (when (github.branch repo "master") [branch] ...)
    https://developer.github.com/v3/repos/#get-branch
  ###
  (ref branch> (lambda [repo branch]
    (get> (+ "repos/" repo.full_name "/branches/" branch))
  ))

  ### ref: (github.session>)
    Start a GitHub session. Shows modal dialog if user-name and password
    are not in browser storage.
  ###
  (ref session> (=>
    (ref auth (or
      (sessionStorage.getItem "ghcontext")
      (localStorage.getItem "ghcontext")
    ))
    (cond
      auth    (promised { auth-header: auth })
      (else)  (ask-user-to-login>)
    )
  ))

  (ref ask-user-to-login> (promise (using [bootstrap]
    (when (bootstrap.modal> "github/github-login" {}) [r]
      (cond (is r.login.value "true") (do
        (ref joined (+ r.username.value ":" r.password.value))
        (ref auth (+ "Basic " (btoa joined)))
        (save-user auth r.remember.checked)
        (resolve-promise { auth-header: auth })
      ) (else)
        (reject-promise { error: true reason: "User abort" })
      )
    )
  )))
  (ref save-user (lambda [auth remember]
    (cond (is remember)
      (localStorage.setItem "ghcontext" auth)
    (else) (do ## user wants amnesia
      (localStorage.removeItem "ghcontext")
      (sessionStorage.setItem "ghcontext" auth)
    ))
  ))

  (ref request> (lambda [type url options]
    (ref send-request (lambda [session]
      (ref headers {
        Accept:           "application/vnd.github.v3+json"
        Authorization:    session.auth-header
        'Content-Type':   "application/json;charset=UTF-8"
      })
      (net.http-request> type
        (+ "https://api.github.com/" url) headers
        (JSON.stringify options)
      )
    ))

    (when (session>) [session]
    (when (send-request session) [response]
      (JSON.parse response)
    ))
  ))

  (ref get> (lambda [url options] (request> "GET" url options "")))

  ### ref: (github.cdn-uri project hash filepath)
    e.g. (ref uri (github.cdn-uri "atogov/RAM" "develop" "tests/pasckages.json"))
  ###
  (ref cdn-uri (lambda [project hash filepath]
    (return (+ "https://cdn.rawgit.com/" project "/" hash "/" filepath))
  ))

  (export {
    repo> repos> cdn-uri contents> tree> branch> blob> download>
    create> update> delete>
  })
)
