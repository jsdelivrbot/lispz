(using [list]
  ### spec: basic >> Execution Context
  ###
  (macro execution-context [context *body]
    (lispz.execution-context.push context)
    *body (ref _ecres_ _res_)
    (lispz.execution-context.pop)
    (ref _res_ _ecres_)
  )
  ### spec: basic >> Execution Context >> Adding Loggers
  ###
  (global add-execution-context-logger (lambda [name logger]
    (cond lispz.execution-context.loggers
      (lispz.execution-context.loggers.update! name logger)
    )
  ))
  
  (ref loc  (=> (return (+ @.name ":" @.line))))
  (ref loc2 (=> (return (+ (loc @.location) " from " (loc @.previous)))))
  (ref src  (lambda [source around]
    (ref lines (source.split "\n"))
    (ref bounds (cond
      around {
          start: (Math.max 0 (- around 3))
            end: (Math.min lines.length (+ around 3))
        }
      (else) { start: 0  end: lines.length }
    ))
    (ref lines ((lines.slice bounds.start bounds.end).map (lambda [line idx]
      (return (+ "\t" (+ idx bounds.start 1) " >>>\t" line))
    )))
    (return (+ "\n" (lines.join "\n")))
  ))
  (ref json (=>
    (ref lines ((JSON.stringify @ null 2).split "\n"))
    (return (lines.join "\n    "))
  ))

  (ref loggers (stateful {
    load:    (=> (return @.uri))
    module:  (=> (return (+ @.uri " - " @.state)))
    compile: (=> (return (+ (loc2 @) (src @.source @.location.line))))
    other:   (=> (return (json @)))
  }))
  (ref format-context (=>
    (ref name (+ @ ": "))
    (ref spaces (- 16 name.length))
    (cond (< spaces 1)  name
          (else)        (+ "    " name (  "                ".slice 0 spaces))
    )
  ))
  (ref logger (lambda [execution-context args]
    (ref context (list.reverse execution-context))
    (lispz.log "Context:" context) ## to JavaScript console just in case...
    (console.log (get args 0) "\nContext:")
    (context.forEach (lambda [item]
      (ref logger (or (get loggers item.context) loggers.other))
      (console.log (+ (format-context item.context) (logger item)))
    ))
  ))
  (stateful.morph! logger) (logger.update! {loggers})
  (export logger)
)
