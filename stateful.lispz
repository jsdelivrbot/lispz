### spec: basic >> state -- Stateful Containers
      (describe "Create a new stateful object -- (ref context (stateful seed))" (lambda []
        (ref options (stateful {name: "undefined" address: "nowhere"}))
        (it "is able to read members directly -- context.member" (lambda []
          ((expect options.name).toBeEqual "undefined")
        ))
        (it "is able to read members by key -- context[key]" (lambda []
          ((expect options["name"]).toBeEqual "undefined")
        ))
        (it (+ "is able to update a dictionary with changes -- "
          "(context.update! {a: dictionary})") (lambda []
            (options.update! {name: "Barney Rubble" address: "Next Door"})
            ((expect options.name).toBeEqual "Barney Rubble")
            ((expect options.address).toBeEqual "Next Door")
        )
          )
      ))

      (describe "Creating a stateful reference -- (ref context (stateful.morph! this))" (lambda []
        (ref that {a: 1 b: 2})
        (ref context (stateful.morph! that))
        (it "looks the same as the original object" (lambda []
          ((expect context.a).toBeEqual that.a)
        ))
        (it "reflects changes to the original object" (lambda []
          (context.update! {a: 99})
          ((expect that.a).toBeEqual 99)
        ))
      ))

  Be polite and use this container responsibly. Adding protection adds overhead.
  If you want to cheat, then on your head be it.
###

(macro #set! [list index value] (#join '' list '[' index ']=' value ';'))

(ref #merge! (lambda [target source]
  (ref keys (Object.keys source))
  (ref own-keys (keys.filter (=> (source.hasOwnProperty @))))
  (own-keys.forEach (lambda [key]
    (ref source-child (get source key))
    (ref target-child (get target key))
    (ref is-dictionary (and
      source-child target-child
      (is source-child.constructor Object)
      (is target-child.constructor Object)
    ))
    (cond is-dictionary
      (#merge! target-child source-child)
    (else) ## either does not exist or in super
      (#set! target key source-child)
    )
  ))
))

(ref #morph! (lambda [obj changes]
  (ref morphed (cond
    obj.update!               obj ## already morphed
    (instance-of Array obj)   (#morph-array!  obj)
    (instance-of Object obj)  (#morph-object! obj)
    (else)                    (#morph-object! { data: obj })
  ))
  (morphed.update! changes)
))
(ref #morph-object! (lambda [obj] (cond (not obj.update!) (do
  (Object.defineProperties obj {

    update!: {value: (lambda [update value]
      (ref target this)
      (cond update (do
        (cond (is arguments.length 1)
          (#merge! target update)
        (and (target.hasOwnProperty update) (instance-of Object value))
          (#merge! (get target update) value)
        (else)
          (#set! target update value)
        )
        (target.after-update update value)
      ))
      target
    )}

    after-update: { value: (=>) configurable: true }

    replace!: {value: (lambda [replacements value]
      (this.delete! replacements value)
      (this.update! replacements value)
    )}

    delete!: { value: (lambda [deletions is-name]
      (ref self this)
      (cond is-name
        (#join '' ';delete self[' deletions ']')
      (else)
        ((Object.keys deletions).forEach (=>
          (#join '' ';delete self[' @ ']') @
        ))
      )
      self
    )}
  })
  obj
))))

(ref #morph-array! (lambda [array]
  (Object.defineProperties array {
    replace!: { value: (lambda [index value] (#set! this index value)) }
    push!:    { value: (=> (Array.prototype.push.apply this (*arguments 0))) }
    pop!:     { value: (=> (Array.prototype.pop.apply this)) }
  })
  array
))

(global stateful (lambda [seed]
  (ref item (cond
    (instance-of Array seed)    (#morph-array!  (seed.slice))
    (instance-of Object seed)   ((#morph-object! {}).update! seed)
    (else)                      (#morph-object! (or seed {}))
  ))
))

(global stateful.after-updates (lambda [obj action]
  (Object.defineProperties obj { after-update:
    {value: action  configurable: true }
  })
))

(global stateful.cache (curry [store update key]
  (or (get store key) (do (store.update! key (update)) (get store key)))
))

(global stateful.morph! #morph!)

### We sometimes need to change Lispz functionality ###
(stateful.morph! lispz)

(export [])
