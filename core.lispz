### spec: Modules >> Module Structure

All Lispz source files are modules. They are loaded on first request by client code. Subsequent requests returns a cached reference to the exports.
###
### spec: Modules >> Module Usage

Every module must include an export statement including a dictionary of symbols to be exported

    (ref one (lambda [] ...)
    (ref two 22)
    (export {one two})

If a module requires other asynchronous operations it can defer the export statement until they are ready.

    (lispz.script "ext/jquery.js" (lambda [] (export { ... })))

To access external modules, wrap your code in 'using'. Data and functions exported from a module are linked to the import name.

    (using [dict net list]
      (ref combined (dict.merge d1 d2 d3))
    )

...and that is all there is to it.
###
(macro using [modules *on_ready] ';' (lispz.load (#join '' '"' modules '"')
  (lambda (#requires modules) *on_ready)
))
### Modules must export to continue processing ###
(macro export [exports] (#join '' '__module_ready__(' exports ')'))

### ref: (catch-errors actions error) ## error has error reference set
    e.g. (catch-errors (do *body) (console.log error))
###
(macro catch-errors [actions on-error]
  (do (#join '' 'try{_res_=' actions '}catch(error){_res_=' on-error '}'))
)
### ref: (guard actions) ## null if any errors
    e.g. (ref result (guard data.source.counter)) ## null if source null
###
(macro guard [*body]
  (do (#join '' 'try{_res_=' *body '}catch(error){_res_=undefined}'))
)

### spec: developer >> debug
  `(debug)` is a development helper macro. It will print a stack trace
  and the contents of any parameters on the console. If you left-align it
  then it will be easy to find later to delete.
###
### spec: debug
  (describe "(debug [p1, p2, ...]) ## macro to display stack and messages" (lambda []
    (it "displays a stack trace and the parameters provided" (lambda []
      (spy-method console trace)
      (debug "multiple" "parameters")
      ((expect console.trace).toHaveBeenCalled)
    ))
  ))
###
(macro debug [*msg] (console.trace (#join ',' *msg)))

### spec: basic >> functions >> Variable Parameter Lists
    Like JavaScript, lispz function definitions specify a fixed number of arguments.
    To gain access to the full list of arguments, use *arguments, with a starting index.

        (lambda [type rest] (console.log type "=" (*arguments 1)))
###
(macro *arguments [from to] (lispz.slice arguments from to))

### spec: basic >> References
  @TODO
###
(macro ref [name value]
  (#join '' '(_res_=(' name '=' value '))')
  (#ast add_reference name)
)

### spec: basic >> References >> Global References
  @TODO
###
(macro global [name value]
  (#join '' 'lispz.globals.' name '=' value)
  (macro name [&params] (#join '' '(_res_=lispz.globals.' name '(' &params '))'))
)

### spec: basics -- Conditionals
    Lispz boasts only one traditional conditional operator plus a number of
    macros for conditional assignment and function return. The operator,
    cond takes pairs of lists where the first is the condition and the
    second the action. Evaluation stops after the first true condition.
    There is an else macro that evaluates to true to catch situations not
    covered specifically. The default? function takes a value and returns
    it if it exists and is not empty, otherwise it returns the default value.

        (cond (is v "One")  1
              (not v)       0
              (else)       -1
        )

    Because conditionals work with list pairs, it is necessary to wrap the actions
    if there are more than one. Lispz provides 'do' for that.

        (cond ok (do (finish-up) true))

    The standard conditional tests (< > <= >=, etc) are augmented by aliases (is isnt not).
###
(macro cond [*list]
  ((lambda
    (#join '' ';switch(false){case !(' (#pairs *list '):return ' ';case!(') '}')
    (return null)
  ) arguments)
)
(macro else 'true')

### spec: basics >> Operators ###
(macro not [value] (#join '' '!(' value ')'))
(macro instance-of [type obj] (#join '' '(' obj ' instanceof ' type ')'))

### spec: basic >> do
###
(macro do [*body] ((lambda *body) arguments))

### spec: function
  (describe "(lambda [p1 p2 ...] ...) ## function definition" (lambda []
    (it "defines an anonymous function that can be called" (lambda []
      (ref f1 (lambda [a b] (return (* a b))))
      (ref result (f1 2 3))
      ((expect result).toBe 6)
    ))
    (it "has optional parameters" (lambda []
      (ref f2 (lambda (return 333)))
      (ref result (f2))
      ((expect result).toBe 333)
    ))
  ))
  (describe "(lambda [p1 p2 ...] ...) ## alternate function definition" (lambda []
    (it "defines an anonymous function that can be called" (lambda []
      (ref f1 (lambda [a b] (return (* a b))))
      (ref result (f1 2 3))
      ((expect result).toBe 6)
    ))
    (it "has optional parameters" (lambda []
      (ref f2 (lambda [] (return 222)))
      (ref result (f2))
      ((expect result).toBe 222)
    ))
  ))
###

### spec: basic >> Retrieval - can be used for objects and arrays
  @TODO
###
(macro get [dict *key] (#join '' '(_res_=' dict '[' (#join '][' *key) '])'))

### spec: conditional processing ###
(macro defined? [field] (!== (typeof field) "undefined"))


(macro new [cls *params] (#join '' '(_res_=(new ' cls '(' (#join ',' *params) ')))'))

### ref: (symbol-to-string symbol) ## ==> "symbol" ###
(macro symbol-to-string [symbol] (#join '' '"' symbol '"'))

(using [fp] (using [stateful]
  ### ref: (annotate function annotations)
      e.g. (ref act (annotate (=> ...) { mapper to-string }))
  ###
  (global annotate (lambda [func annotations]
    (ref primary (lispz.globals.stateful.morph! func))
    (primary.update! annotations)
  ))

  ### ref: (once function) ## lazy evaluation
    e.g. (ref read-it (once (promise ...))) ... (when (read-it) ...)
  ###
  (global #once (lambda [lazy-expression]
    (ref first-time (=>
      (ref evaluated-value (lazy-expression))
      (action.update! { func: (=> evaluated-value) })
      evaluated-value
    ))
    (ref action (lispz.globals.stateful
      { func: first-time when: (new Date) }))
    (=> (action.func))
  ))
  (macro once [*body] (lispz.globals.#once (=> *body)))

  (using [promise counters message] (export {}))
))
