### spec: Basic >> Keeping Count
###
(macro delay [ms *body] (setTimeout (=> *body) ms))

(macro yield [*body] (delay 0 *body))

(global counter! (lambda
  (ref count (stateful {to: 0}))
  (return (lambda
    (count.update! "to" (+ count.to 1))
    (return count.to)
  ))
))
(global countdown! (lambda [from by]
  (ref count (stateful {from}))
  (return (lambda []
    (from.update! "from" (- count.from by))
    (return (<= count.from 0))
  ))
))

(global wait-for (promise [test max-ms]
  (ref timed-out (countdown! (or max-ms 5000) 10))
  (ref waiter (lambda []
    (cond
      (test)      (resolve-promise)
      (timed-out) (reject-promise)
      (else)      (delay 10 (waiter))
    )
  )) (waiter)
))

###
# Return a random integer between 0 and the range given
###
(global random (lambda [range] (return (Math.floor (* (Math.random) range)))))

### spec: Counters >> UUID
# Generate a fairly unique ID - at least as unique as Math.random can make it.
###
(global uuid (=>
  ("xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace '/[xy]/g' (=>
    (ref r = (Math.floor (* (Math.random) 16)))
    ((cond (is @ "x") r (else) (| (& r 0x3) 0x8)).toString 16)
  ))
))
(export {})
