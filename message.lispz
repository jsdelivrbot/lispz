### spec: async >> Messaging
###
(using [list dict]
  (ref exchange  (stateful))
  (ref observers (stateful.cache exchange (=> (stateful []))))

  ### spec: async >> Messaging >> (clear)
    Clear all observers from a message box.
  ###
  (ref clear (lambda [matcher]
    (cond (instance-of RegExp matcher)  (clear-by-regexp matcher)
          (else)                        (clear-by-name   matcher)
    )
  ))
  (ref clear-by-regexp (lambda [matcher]
    (ref matches (dict.filter exchange (=> (matcher.test @))))
    (list.for-each matches (=> (clear-by-name @)))
  ))
  (ref clear-by-name (lambda [name]
    (exchange.update! name (stateful []))
  ))

  ### spec: async >> Messaging >> Sources >> (request>)
    Send a message directly to an address so that it is picked up by
    all observers. Call returns a promise
    that is fulfulled when all listeners have responded. The promise
    returns an array of results for each listener.

        (ref requested (message.request> "examples/my-address"
          { msg: "whatsit" read-now: true }
        ))
        (when [requested] ...)

    For in-process addresses, the observers are expected to be well behaved.
    They should (yield) the CPU rather that take too much time.
  ###
  (ref request> (curry [address packet]
    (ref postman (lambda [obs] (promised (obs.action> packet obs))))
    (promise.all ((observers address).map postman))
  ))

  ### spec: async >> Messaging >> Sources >> (send)
    Send a message directly to an address so that it is picked
    up by all observers. Unlike _request>_, _send_
    does not expect the receivers to respond.
  ###
  (ref send (curry [address packet]
    (ref postman (lambda [obs] (yield (obs.action> packet obs))))
    ((observers address).map postman)
  ))

  ### spec: async >> Messaging >> (ready>)
    If a _post>_ can happen before a listener is set - and it is important
    that the _post>_ is heard, wrap it in a _ready>_.
  ###
  (ref ready> (promise [address]
    (ref ready-check (=>
      (ref listeners = (observers address))
      (cond listeners.length
        (resolve-promise)
      (else)
        (delay 100 ready-check)
      )
    ))
  ))

  ### spec: async >> Messaging >> Sources >> (listen)
    Observe the passage of a message. An action is called with the packet
    and a reference to the observer object as stateful local context.
    The action can return a promise and preferably not do anything too
    time-costly in-process.
  ###
  (ref listen (curry [address action>]
    ((observers address).push! (stateful { address action> }))
  ))

  ### spec: async >> Messaging >> Sources >> (dispatch)
    Dispatch is a specialised version of observe where a number of actions
    can be defined and messages built to dispatch to them.

        (ref open  (=> ...))
        (ref close (=> ...))
        (message.dispatch "my-component" { open close })

    Each action creates a separate message-box using the given address followed
    by the action name. In this example, _my-component/open_ and _my-component/close_.
  ###
  (ref dispatch (curry [address actions]
    (dict.for-each actions (lambda [name action>]
      (message.listen (+ address "/" name) action>)
    ))
  ))

  ### spec: async >> Messaging >> Sources >> (combine-address)
    Mapping and filtering messages are given source and target
    addresses. If the target address starts with a / it is used
    alone, otherwise the source and target addresses are concatenated.

        (combine-address "left" "right")  ## left/right
        (combine-address "left" "/right") ## right
  ###
  (ref combine-address (lambda [from to]
    (cond
      (is (first to) "/")   (slice to 1)
      (else)                (+ from "/" to)
    )
  ))

  ### ref: (from.update! {source: (lambda [address ...])})
      e.g. (from.update! {callback: (lambda [address] ...)})
      then use as (message.from.callback "my-address")
  ###
  (ref from (stateful {
    promise: (lambda [address a-promise]
      (after a-promise (message.send (*arguments 0)))
    )
  }))

  ### spec: async >> Messaging >> Modifiers >> (map)
    Map message streams to change the results
        (ref @click (message.from.click "my-message-address" document.body))
        (ref @mouse (message.map @click "mouse" (lambda [event]
          {x: event.clientX  y: event.clientY}
        )))
        (message.listen @mouse (=> (console.log @.x @.y)))
  ###
  ### ref: (message.map from to mapper)
    e.g. (message.map @click "mouse" (=> {x: @.clientX y: clientY}))
    will send messages to (+ @click "/mouse") - use "/to" for abs address
  ###
  (ref message-map (lambda [from to mapper]
    (ref address (combine-address from to))
    (message.listen from (=> (message.send address (mapper @))))
    address
  ))

  ### spec: async >> Messaging >> Modifiers >> (filter)
    Map message streams to change the results
        (ref @click (message.from.click "my-message-address" document.body))
        (ref @mouse (message.map @click "mouse" (lambda [event]
          {x: event.clientX  y: event.clientY}
        )))
        (ref @top-left (message.filter @mouse "top-left" (lambda [pos]
          (< pos.x pos.y)
        )))
        (message.listen @top-left (=> (console.log @.x @.y)))
  ###
  ### ref: (message.filter from to filterer)
    e.g. (message.filter @mouse "top-left" (=> (< @.x @.y)))
    will send messages to (+ @mouse "/top-left") - use "/to" for abs address
  ###
  (ref message-filter (lambda [from to filterer]
    (ref address (combine-address from to))
    (message.listen from (lambda [packet]
      (cond (filterer packet) (message.send address packet))
    ))
    address
  ))

  ### ref: (message.throttle address milliseconds)
    e.g. (message.throttle @mouse 100) sends (+ @mouse "/100ms")
    will only pass messages every 100ms or more apart to
  ###
  (ref throttle (lambda [from ms]
    (ref address (+ from "/" ms "ms"))
    (message.listen from (lambda [packet context]
      (ref now (new Date))
      (ref elapsed (- now (or context.last-message-time 0)))
      (cond (> elapsed ms) (do
        (context.update! { last-message-time: now })
        (message.send address packet)
      ))
    ))
    address
  ))

  ### spec: async >> Messaging >> Sources >> (trace)
    Turning tracing on will display messages posted and received to
    the browser console. Use a regular expression to reduce the number
    of messages to a manageable amount. A parameter of false will turn
    trace off again.
  ###

  (ref with-tracing (lambda [name action filterRE has-packet]
    (lambda [address packet]
      (cond (filterRE.test address)
        (console.trace name "\t" address (cond has-packet packet (else) ""))
      )
      (action address packet)
    )
  ))

  (ref set-trace (lambda [filterRE]
    (message.update! {
      send:     (with-tracing "SEND    "  send      filterRE true)
      request>: (with-tracing "REQUEST "  request>  filterRE true)
      listen:   (with-tracing "LISTEN  "  listen    filterRE false)
    })
  ))

  (ref trace (=>
    (cond
      (is @ false)    (message.update! { send request> listen })
      (not @)         (set-trace '/.*/')
      (else)          (set-trace @)
    )
  ))

  ### ref: (actor my-actor [process])) (my-actor message)
      e.g. (actor log (console.log packet))) (log "message")
           ... (actor log)) (log "another message")
           (log.map       lower-case  (=> (@.toLowerCase)))
           (log.filter    odd         (=> (/ @ 2)))
           (log.throttle  1000)
  ###
  (macro actor [id #body-length *body]
    ## creates symbol 'id' as well as builds/retrieves the actor
    (ref id (#actor (symbol-to-string id) #body-length
      (lambda [packet context] *body)))
  )

  (global #actor (lambda [id has-listener listener]
    (ref address (+ "actor/" id))
    (cond has-listener (message.listen address listener))
    (ref actor   (lambda [packet] (message.send address packet)))
    (stateful.morph! actor {
      map:      (lambda [id mapper]
        (message.map      address (symbol-to-string id) mapper))
      filter:   (lambda [id filterer]
        (message.filter   address (symbol-to-string id) filterer))
      throttle: (lambda [ms]
        (message.throttle address ms))
    })
  ))

  (ref message (lambda [address] {
    send:     (=> (send     address @))
    request>: (=> (request> address @))
    listen:   (=> (listen   address @))
    dispatch: (=> (dispatch address @))
    ready>:   (=> (ready>   address))
  }))

  (stateful.morph! message {
    send listen dispatch request> clear trace from ready>
    map: message-map filter: message-filter combine-address
    exchange throttle
  })
  (lispz.update! { message })
  (export message)
)
