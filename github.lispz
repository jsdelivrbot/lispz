(using  [net dict list]
  (var cdn-uri (lambda [project filepath]
    (return (+ "https://cdn.rawgit.com/" project "/master/" filepath))
  ))
  (net.script (cdn-uri "michael/github" "github.js") (=>
    (var repo (lambda [username password project]
      (var github (new Github {username password auth: "basic"}))
      (var repo (github.getRepo.apply null (project.split "/")))
      (set! repo.lispz {github username password project branch: "master"})
      (return repo)
    ))
    ## Set the branch to use for repo - defaults to master
    (var branch (lambda [repo branch-name ready=>]
      (set! repo.lispz.branch branch-name)
      (repo.branch branch-name ready=>)
    ))
    ## list files in a specific path on the repo
    (var list-dir (lambda [repo path ready=>]
      (repo.contents repo.lispz.branch path ready=>)
    ))
    (var list-all (lambda [repo path ready=>]
      (var result [[]])
      (var #list-all (lambda [path level-done=>]
        (list-dir repo path (lambda [err data]
          (cond err (do (console.log err) (throw "Error accessing GitHub")))
          (list.sequential data (lambda [entry next=>]
            (cond (is "dir"  entry.type) (#list-all entry.path next=>)
                  (is "file" entry.type) (do (result.push entry.path) (next=>))
            )
          ) level-done=>)
        ))
      )) (#list-all path (=> (ready=> null result)))
    ))
    (var read (lambda [repo path ready=>]
      (repo.read repo.lispz.branch path ready=>)
    ))
    (var update (lambda [repo ready=>]
      (return-if (is repo.lispz.branch repo.lispz.username) (ready=>))
      (var branch-name (default? repo.lispz.username "master"))
      (branch repo branch-name ready=>)
    ))
    (var write (lambda [repo path contents comment complete=>]
      (repo.write repo.lispz.branch path contents comment complete=>)
    ))
    ## Build and save a dependency list
    (var builder (lambda [target-repo name sources built=> actors]
      (var code {js: [[]] css: [[]]})
      (var from [["Gathered from: "]])
      (list.sequential sources (lambda [source source-read=>]
        (var source-repo (actors.repo target-repo source.repo))
        (from.push source.repo)
        (list.sequential source.files (lambda [meta file-set-read=>]
          (var base (default? meta.base ""))
          (actors.list-all source-repo base (lambda [err file-list]
            (var files file-list)
            (cond meta.include
              (var files (files.filter (lambda [file]
                (return (meta.include.test file))
              )))
            )
            (cond meta.exclude
              (var files (files.filter (lambda [file]
                (return (not (meta.exclude.test file)))
              )))
            )
            (list.sequential files (lambda [path next-file=>]
              (var saver (get code (last (path.split "."))))
              (return-if (not saver) (next-file=>))
              (actors.read source-repo path (lambda [err data]
                (cond saver (do
                  (saver.push (+ "\n\n/*" path "*/\n\n"))
                  (saver.push data)
                ))
                (next-file=>)
              ))
            ) file-set-read=>)
          ))
        ) source-read=>)
      ) (=>
        (var save (lambda [ext done=>] (update target-repo (=>
          (var source (get code ext))
          (return-if (not source.length) (done=>))
          (write target-repo (+ "ext/" name "." ext)
            (unescape (encodeURIComponent (source.join "")))
            (from.join " ") done=>
          )
        ))))
        (save "js" (=> (save "css" built=>)))
      ))
    ))
    (var build (lambda [target-repo name sources built=>]
      (builder target-repo name sources built=> {
        list-all read
        repo: (lambda [target-repo name]
          (return (repo target-repo.lispz.username
            target-repo.lispz.password name
          ))
        )
      })
    ))
    (export {
      branch list-dir list-all cdn-uri build builder repo read write update
      move: (lambda [repo from to ready=>]
        (repo.move repo.lispz.branch from to complete=>)
      )
      delete: (lambda [repo path ready=>]
        (repo.remove repo.lispz.branch path complete=>)
      )
    })
  ))
)
