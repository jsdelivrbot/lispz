### https://developer.github.com/v3/ ###
### spec: Support
  (using [github]
    (ref delete-file> (lambda [path]
      (ref repo (github.repo> "paulmarrington/lispz"))
      (when (github.contents> repo "master" "README.md") [contents]
        (github.delete> repo "master" contents.sha "deleted")
      )
    ))
    (ref get-sha> (lambda [path]
      (ref repo (github.repo> "paulmarrington/lispz"))
      (when (github.contents> repo "master" path) @.sha)
    ))
    (ref create-file> (lambda [path]
      (ref repo (github.repo> "paulmarrington/lispz"))
      (when (github.create> repo "master" path "Hi" "created") @ ))
    ))
  )
###
(using [net dict dom]

  ### spec: Retrieve repository details
    (it "will include the full name of the repo" (lambda [done]
      (using [github]
        (when (github.repo> "paulmarrington/lispz") [repo]
        	((expect repo.full_name).toEqual "paulmarrington/lispz")
          (done)
        )
      )
    ))
  ###
  ### ref: (github.repo> project) ## log in form displayed if necessary
    e.g. (when (github.repo> "paulmarrington/lispz") [repo] ...)
    https://developer.github.com/v3/repos/contents/#get-contents
  ###
  (ref repo> (lambda [name] (get> (+ "repos/" name) {})))

  ### spec: List repositories for a user
    (it "will include the full name of the repo" (lambda [done]
      (using [github]
        (when (github.repos> "paulmarrington") [repos]
        	((expect repos.length).toBeGreaterThan 7)
          (done)
        )
      )
    ))
  ###
  ### ref: (github.repos> organisation)
    e.g. (when (github.repos> "paulmarrington") [repos] ...)
    https://developer.github.com/v3/repos/#list-user-repositories
  ###
  (ref repos> (lambda [owner]
    (get> (cond owner (+ "users/" owner "/repos") (else) "user/repos") {
      affiliation: "owner,collaborator" sort: "full-name"
    })
  ))

  ### spec: Read contents given a branch and path
    (it "can be read as base64" (lambda [done]
      (using [github]
        (ref (github.repo> "paulmarrington/lispz"))
        (when (github.contents> repo "master" "README.md") [contents]
        	((expect contents.encoding).toEqual "base64")
          (done)
        )
      )
    ))
  ###
  ### ref: (github.contents> <repo> branch path) ## info on dir or file
    e.g. (when (github.contents> repo "master" "/lib" }))
    https://developer.github.com/v3/repos/contents/#get-contents
  ###
  (ref contents> (lambda [repo branch path]
    (when repo
      (get> (+ "repos/" @.full_name "/contents/" path) { ref: branch })
    )
  ))

  ### spec: Read contents given SHA
    (it "can be read as base64" (lambda [done]
      (using [github]
        (ref repo (github.repo> "paulmarrington/lispz"))
        (when (github.blob> repo "master" "README.md") [blob]
        	((expect blob.encoding).toEqual "base64")
          (done)
        )
      )
    ))
  ###
  ### ref: (github.blob> <repo> sha)
    e.g. (when (github.blob> repo tree[path].sha) [blob] blob.contents)
    https://developer.github.com/v3/git/blobs/#get-a-blob
  ###
  (ref blob> (lambda [repo sha]
    (when repo (get> (+ "repos/" @.full_name "/git/blobs/" sha)))
  ))

  ### spec: Download a file from the repository
    (it "can be read in text form" (lambda [done]
      (using [github]
        (ref repo (github.repo> "paulmarrington/lispz"))
        (when (github.read> repo "master" "README.md") [contents]
        	((expect contents).toEqual "base64")
          (done)
        )
      )
    ))
  ###
  ### ref: (github.read> <repo> branch path)
    e.g. (when (github.read> repo "master" "README.md") [contents] ...)
  ###
  (ref read> (lambda [repo branch path] (when repo
    (ref base "https://raw.githubusercontent.com")
    (ref url (+ base "/" @.full_name "/" branch "/" path))
    (net.http-get url)
  )))

  ### spec: Create a new entry
    (it "can create a new entry" (lambda [done]
      (using [github]
        (ref repo (github.repo> "paulmarrington/lispz"))
        (when (github.create> repo "master" "test/tmp.txt" "Hi" "msg") [result]
        	((expect result.message).toEqual "msg")
          (done)
        )
        (when-rejected [err] (fail "Can't create -" err) (done))
      )
    ))
  ###
  ### ref: (github.create> <repo> branch path contents commit-message)
    (when (github.create> repo "master" "test/tmp.txt" "Hi" "msg") [result] ...)
    https://developer.github.com/v3/repos/contents/#create-a-file
  ###
  (ref create> (lambda [repo branch path contents message] (when repo
    (ref url (+ "repos/" @.full_name "/contents/" path))
    (ref options { branch message content: (net.base64 contents) })
    (request> "PUT" url options)
  )))

  ### spec: Update an entry
    (it "can update an entry" (lambda [done]
      (using [github]
        (when (create-file> "test/tmp.txt" "created")
        (when (get-sha> "test/tmp.txt") [sha]
        (ref repo (github.repo> "paulmarrington/lispz")
        (when (github.update> repo "master"
        "test/tmp.txt" sha "2nd" "changed") [results]
          ((expect results.message).toEqual "changed")
        ))))
        (when-rejected [err] (fail "Can't update -" err) (done))
      )
    ))
  ###
  ### ref: (github.update> <repo> branch path sha contents commit-message)
    (when (github.update> repo "master" "test/tmp.txt" sha "Hi" "msg") [result] ...)
    https://developer.github.com/v3/repos/contents/#update-a-file
  ###
  (ref update> (lambda [repo branch path sha contents message] (when repo
    (ref url (+ "repos/" @.full_name "/contents/" path))
    (ref options { branch message sha content: (net.base64 contents) })
    (request> "PUT" url options)
  )))

  ### spec: Delete an entry
    (it "can delete an entry" (lambda [done]
      (using [github]
        (when (create-file> "test/tmp.txt" "created")
        (when (get-sha> "test/tmp.txt") [sha]
        (ref repo (github.repo> "paulmarrington/lispz")
        (when (github.delete> repo "master" "test/tmp.txt" sha "no more")
          ((expect results.commit.message).toEqual "no more")
        ))))
        (when-rejected [err] (fail "Can't delete -" err) (done))
      )
    ))
  ###
  ### ref: (github.delete> <repo> branch path sha commit-message)
    (when (github.delete> repo "master" "test/tmp.txt" sha "msg") [result] ...)
    https://developer.github.com/v3/repos/contents/#delete-a-file
  ###
  (ref delete> (lambda [repo branch path sha message] (when repo
    (ref url (+ "repos/" @.full_name "/contents/" path))
    (ref options { branch message sha })
    (request> "DELETE" url options)
  )))

  ### spec: List contents of a repository
    (it "can retrieve a tree object" (lambda [done]
      (using [github]
        (ref repo (github.repo> "paulmarrington/lispz")
        (when (github.tree> repo "master") [tree]
        	((expect tree.tree.length).toBeGreaterThan 100)
          (done)
        ))
      )
    ))
  ###
  ### ref: (github.tree> <repo> branch) ## recursive info tree
    e.g. (when (github.tree> repo "master" }))
    https://developer.github.com/v3/git/trees/#get-a-tree-recursively
  ###
  (ref tree> (lambda [repo branch] (when repo [repo]
    (when (branch> repo branch) [branch]
    (get>
      (+ "repos/" repo.full_name "/git/trees/" branch.commit.sha)
      { recursive: 1 }
    ))
  )))

  ### spec: Retrieve branch
    (it "can retrieve branch details" (lambda [done]
      (using [github]
        (ref repo (github.repo> "paulmarrington/lispz")
        (when (github.branch> repo "master") [branch]
        	((expect branch.name).toequal "master")
          (done)
        ))
      )
    ))
  ###
  ### ref: (github.branch> <repo> [branch]) ## branch defaults to master
    e.g. (when (github.branch> repo) [branch] ...)
    https://developer.github.com/v3/repos/#get-branch
  ###
  (ref branch> (lambda [repo branch] (when repo [data]
    (get> (+ "repos/" data.full_name "/branches/" (or branch "master")))
  )))

  ### ref: (github.branches> repo) ###
  (ref branches> (lambda [repo] (when repo [data]
    (get> (+ "repos/" data.full_name "/branches"))
  )))

  ### ref: (github.session>)
    Start a GitHub session. Shows modal dialog if user-name and password
    are not in browser storage.
  ###
  (ref session> (=>
    (ref user (or
      (sessionStorage.getItem "github-user")
      (localStorage.getItem "github-user")
    ))
    (ref auth-header (or
      (sessionStorage.getItem "ghcontext")
      (localStorage.getItem "ghcontext")
    ))
    (cond
      auth-header (promised { auth-header user })
      (else)      (ask-user-to-login>)
    )
  ))

  (ref ask-user-to-login> (promise (using [bootstrap]
    (when (bootstrap.modal> "github/github-login" {}) [r]
      (cond (is r.login.value "true") (do
        (ref joined (+ r.username.value ":" r.password.value))
        (ref auth-header (+ "Basic " (btoa joined)))
        (save-user r.username.value auth-header r.remember.checked)
        (resolve-promise { auth-header user: r.username.value })
      ) (else)
        (reject-promise { error: true reason: "User abort" })
      )
    )
  )))
  (ref save-user (lambda [user-name auth remember]
    (cond (is remember) (do
      (localStorage.setItem "ghcontext" auth)
      (localStorage.setItem "github-user" user-name)
    ) (else) (do ## user wants amnesia
      (localStorage.removeItem "ghcontext")
      (localStorage.removeItem "github-user")
      (sessionStorage.setItem "ghcontext" auth)
      (sessionStorage.setItem "github-user" user-name)
    ))
  ))

  (ref request> (lambda [type url options]
    (ref send-request (lambda [session]
      (ref headers {
        Accept:           "application/vnd.github.v3+json"
        Authorization:    session.auth-header
        'Content-Type':   "application/json;charset=UTF-8"
      })
      (net.http-request> type
        (+ "https://api.github.com/" url) headers
        (JSON.stringify options)
      )
    ))

    (when session> (when (send-request @) [response]
      (JSON.parse response)
    ))
  ))

  (ref get> (lambda [url options]
    (request> "GET" (+ url (net.dict-to-query options)) {})
  ))

  ### ref: (github.cdn-uri project hash filepath)
    e.g. (ref uri (github.cdn-uri "atogov/RAM" "develop" "tests/pasckages.json"))
  ###
  (ref cdn-uri (lambda [project hash filepath]
    (return (+ "https://cdn.rawgit.com/" project "/" hash "/" filepath))
  ))

  ### ref: (ref fs (once github.fs repo branch)) ## entries> read> write>
    e.g. (when fs (when (@.read> "README.md") [md] ...))
  ###
  (ref fs (lambda [name branch]
    (ref repo  (once (repo> name)))
    (ref list> (once (when (tree> (repo) fs.branch) [tree] tree.tree)))
    (ref entries> (once (when (fs.list>) [tree] (dict.from-list tree "path"))))
    (ref read> (lambda [path] (github.read> (repo) fs.branch path)))
    (ref write> (lambda [path contents message]
      (when entries>
        (cond (ref meta (get @ path))
          (github.update> (repo) fs.branch path meta.sha contents message)
        (else)
          (github.create> (repo) fs.branch path contents message)
        )
      )
    ))
    (ref fs {
      name branch: (or branch "master")
      list> entries> read> write>
    })
  ))

  (ref github {
    repo> repos> cdn-uri contents> tree> branch> branches> blob> read>
    create> update> delete> fs
  })
  (export github)
)
