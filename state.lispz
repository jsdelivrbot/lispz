### literate: basic >> State
  State is the elephant in the room - particularly in the functional programming paradigm.
  When you have state that can be changed from outside, then any function that reads from it
  no longer has referential integrity. This means that identical calls may not return identical
  results.
###

(#join '' 'function State(){} State.prototype={set:function(k,v){this[k]=v}}')
(var state (lambda [seed] (return (new State

(export state)
