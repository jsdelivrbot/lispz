(var insert (lambda [target dictionaries]
  (dictionaries.forEach (lambda [dictionary]
    ((Object.keys dictionary).forEach (lambda [key]
      (dict.update! target key (get dictionary key))
    ))
  ))
  (return target)
))
###
# There is often need to merge multiple dictionaries together to create a new
# combined one.
###
(var merge (lambda [dictionaries]
  (return (insert {} (*arguments 0)))
))
(var insert! (lambda [target dictionaries]
  (return (insert target (*arguments 0)))
))

(var from-list (lambda [list key]
  (var dictionary {})
  (cond list
    (list.forEach (lambda [item] (dict.update! dictionary (get item key) item)))
  )
  (return dictionary)
))

(var for-each (lambda [dict action]
  (Object.keys dict)(.forEach (lambda [k] (action k (get dict k))))
))
###
# Execute a list of asynchronous functions one after another
###
(var sequential (lambda [dict for-each=> on-complete=>]
  (return-if (not dict) (on-complete=>))
  (var list (Object.keys dict))
  (var each=> (=>
    (return-if (not list.length) (on-complete=>))
    (var key (list.shift))
    (for-each=> key (get dict key) each=>)
  ))(each=>)
))

(export {merge from-list insert! for-each sequential})