(using  [github compilers]

  (ref grunt-build (lambda [meta]
    (ref js (stateful [(or meta.pre "")]))
    (ref read-all (promise.all (meta.files.map (promise
      (after (github.fs.read source-repo path)
        (js.push! @) (resolve-promise)
      )
    ))))
    (after read-all
      (js.push! (or meta.post ""))
      (ref contents (js.join "\n"))
      (write target-repo (+ "ext/" meta.target) contents comment)
    )
  ))
  (ref grunt-copy (lambda [files]
    (ref copy-all (promise.all (files.map (promise [item]
      (ref path (or item.src item))
      (after (github.fs.read source-repo path)
        (ref path (+ "ext/" (last (path.split "/"))))
        (write target-repo path contents comment)
      )
    ))))
  ))
  (ref grunt (lambda [target-repo source-project]
    (ref source-repo (github.fs.repo target-repo source-project))
    (ref comment (+ "from " source-project))
    (ref sources [[
      {repo: source-project files: [[
        {include: '/^Gruntfile.js$/' single-level: true}
      ]]}
    ]])
    (after (retriever target-repo sources github.fs)
      (ref grunt-config ((Function
        (+ "var module={};" (last @.js) "return module.exports"))))
      (grunt-config {
        loadNpmTasks: (lambda) registerTask: (lambda)
        initConfig: (promise [config-data]
          (ref grunt-processor {
            build: grunt-build
            copy:  grunt-copy
          })
          (after (update target-repo)
            (resolve-promise grunt-processor config-data)
          )
        )
      })
    )
  ))

  (export { grunt })
)
